class U{constructor(U=0,F=0,l=0){this.x=U,this.y=F,this.z=l}equals(U){return this.x===U.x&&(this.y===U.y&&this.z===U.z)}add(F){return"number"==typeof F?new U(this.x+F,this.y+F,this.z+F):new U(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return"number"==typeof F?new U(this.x-F,this.y-F,this.z-F):new U(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return"number"==typeof F?new U(this.x*F,this.y*F,this.z*F):new U(this.x*F.x,this.y*F.y,this.z*F.z)}lerp(F,l){return new U(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(U){return Math.sqrt((this.x-U.x)**2+(this.y-U.y)**2+(this.z-U.z)**2)}normalize(){const F=this.length();return new U(this.x/F,this.y/F,this.z/F)}flat(){return[this.x,this.y,this.z]}clone(){return new U(this.x,this.y,this.z)}}class F{constructor(U=0,F=0,l=0,t=1){this.x=U,this.y=F,this.z=l,this.w=t}equals(U){return this.x===U.x&&(this.y===U.y&&(this.z===U.z&&this.w===U.w))}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new F(this.x/U,this.y/U,this.z/U,this.w/U)}multiply(U){const l=this.w,t=this.x,Q=this.y,Z=this.z,V=U.w,d=U.x,n=U.y,R=U.z;return new F(l*d+t*V+Q*R-Z*n,l*n-t*R+Q*V+Z*d,l*R+t*n-Q*d+Z*V,l*V-t*d-Q*n-Z*R)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new F(this.x,this.y,this.z,this.w)}static FromEuler(U){const l=U.x/2,t=U.y/2,Q=U.z/2,Z=Math.cos(t),V=Math.sin(t),d=Math.cos(l),n=Math.sin(l),R=Math.cos(Q),W=Math.sin(Q);return new F(Z*n*R+V*d*W,V*d*R-Z*n*W,Z*d*W-V*n*R,Z*d*R+V*n*W)}toEuler(){const F=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(F,l);let Q;const Z=2*(this.w*this.y-this.z*this.x);Q=Math.abs(Z)>=1?Math.sign(Z)*Math.PI/2:Math.asin(Z);const V=2*(this.w*this.z+this.x*this.y),d=1-2*(this.y*this.y+this.z*this.z),n=Math.atan2(V,d);return new U(t,Q,n)}static FromMatrix3(U){const l=U.buffer,t=l[0]+l[4]+l[8];let Q,Z,V,d;if(t>0){const U=.5/Math.sqrt(t+1);d=.25/U,Q=(l[7]-l[5])*U,Z=(l[2]-l[6])*U,V=(l[3]-l[1])*U}else if(l[0]>l[4]&&l[0]>l[8]){const U=2*Math.sqrt(1+l[0]-l[4]-l[8]);d=(l[7]-l[5])/U,Q=.25*U,Z=(l[1]+l[3])/U,V=(l[2]+l[6])/U}else if(l[4]>l[8]){const U=2*Math.sqrt(1+l[4]-l[0]-l[8]);d=(l[2]-l[6])/U,Q=(l[1]+l[3])/U,Z=.25*U,V=(l[5]+l[7])/U}else{const U=2*Math.sqrt(1+l[8]-l[0]-l[4]);d=(l[3]-l[1])/U,Q=(l[2]+l[6])/U,Z=(l[5]+l[7])/U,V=.25*U}return new F(Q,Z,V,d)}}class l{constructor(){const U=new Map;this.addEventListener=(F,l)=>{U.has(F)||U.set(F,new Set),U.get(F).add(l)},this.removeEventListener=(F,l)=>{U.has(F)&&U.get(F).delete(l)},this.hasEventListener=(F,l)=>!!U.has(F)&&U.get(F).has(l),this.dispatchEvent=F=>{if(U.has(F.type))for(const l of U.get(F.type))l(F)}}}class t extends l{constructor(){super(),this._position=new U,this._rotation=new F,this._changeEvent={type:"change"}}get position(){return this._position}set position(U){this._position.equals(U)||(this._position=U,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(U){this._rotation.equals(U)||(this._rotation=U,this.dispatchEvent(this._changeEvent))}}class Q{constructor(U=1,F=0,l=0,t=0,Q=1,Z=0,V=0,d=0,n=1){this.buffer=[U,F,l,t,Q,Z,V,d,n]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,l=U.buffer;return new Q(l[0]*F[0]+l[3]*F[1]+l[6]*F[2],l[1]*F[0]+l[4]*F[1]+l[7]*F[2],l[2]*F[0]+l[5]*F[1]+l[8]*F[2],l[0]*F[3]+l[3]*F[4]+l[6]*F[5],l[1]*F[3]+l[4]*F[4]+l[7]*F[5],l[2]*F[3]+l[5]*F[4]+l[8]*F[5],l[0]*F[6]+l[3]*F[7]+l[6]*F[8],l[1]*F[6]+l[4]*F[7]+l[7]*F[8],l[2]*F[6]+l[5]*F[7]+l[8]*F[8])}clone(){const U=this.buffer;return new Q(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static Eye(U=1){return new Q(U,0,0,0,U,0,0,0,U)}static Diagonal(U){return new Q(U.x,0,0,0,U.y,0,0,0,U.z)}static RotationFromQuaternion(U){return new Q(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const F=Math.cos(U.x),l=Math.sin(U.x),t=Math.cos(U.y),Z=Math.sin(U.y),V=Math.cos(U.z),d=Math.sin(U.z);return new Q(...[t*V+Z*l*d,-t*d+Z*l*V,Z*F,F*d,F*V,-l,-Z*V+t*l*d,Z*d+t*l*V,t*F])}}class Z{constructor(U=1,F=0,l=0,t=0,Q=0,Z=1,V=0,d=0,n=0,R=0,W=1,e=0,i=0,a=0,h=0,B=1){this.buffer=[U,F,l,t,Q,Z,V,d,n,R,W,e,i,a,h,B]}equals(U){if(this.buffer.length!==U.buffer.length)return!1;if(this.buffer===U.buffer)return!0;for(let F=0;F<this.buffer.length;F++)if(this.buffer[F]!==U.buffer[F])return!1;return!0}multiply(U){const F=this.buffer,l=U.buffer;return new Z(l[0]*F[0]+l[1]*F[4]+l[2]*F[8]+l[3]*F[12],l[0]*F[1]+l[1]*F[5]+l[2]*F[9]+l[3]*F[13],l[0]*F[2]+l[1]*F[6]+l[2]*F[10]+l[3]*F[14],l[0]*F[3]+l[1]*F[7]+l[2]*F[11]+l[3]*F[15],l[4]*F[0]+l[5]*F[4]+l[6]*F[8]+l[7]*F[12],l[4]*F[1]+l[5]*F[5]+l[6]*F[9]+l[7]*F[13],l[4]*F[2]+l[5]*F[6]+l[6]*F[10]+l[7]*F[14],l[4]*F[3]+l[5]*F[7]+l[6]*F[11]+l[7]*F[15],l[8]*F[0]+l[9]*F[4]+l[10]*F[8]+l[11]*F[12],l[8]*F[1]+l[9]*F[5]+l[10]*F[9]+l[11]*F[13],l[8]*F[2]+l[9]*F[6]+l[10]*F[10]+l[11]*F[14],l[8]*F[3]+l[9]*F[7]+l[10]*F[11]+l[11]*F[15],l[12]*F[0]+l[13]*F[4]+l[14]*F[8]+l[15]*F[12],l[12]*F[1]+l[13]*F[5]+l[14]*F[9]+l[15]*F[13],l[12]*F[2]+l[13]*F[6]+l[14]*F[10]+l[15]*F[14],l[12]*F[3]+l[13]*F[7]+l[14]*F[11]+l[15]*F[15])}clone(){const U=this.buffer;return new Z(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}}class V extends t{constructor(l=new U(0,0,-5),t=new F,V=1132,d=1132,n=.1,R=100){super();const W=()=>{const U=Q.RotationFromQuaternion(this.rotation).buffer,F=this.position.flat(),l=[[U[0],U[1],U[2],0],[U[3],U[4],U[5],0],[U[6],U[7],U[8],0],[-F[0]*U[0]-F[1]*U[3]-F[2]*U[6],-F[0]*U[1]-F[1]*U[4]-F[2]*U[7],-F[0]*U[2]-F[1]*U[5]-F[2]*U[8],1]].flat();return new Z(...l)};this.position=l,this.rotation=t,this.fx=V,this.fy=d,this.near=n,this.far=R,this.projectionMatrix=new Z,this.viewMatrix=new Z,this.viewProj=new Z,this.update=(U,F)=>{this.projectionMatrix=new Z(2*this.fx/U,0,0,0,0,-2*this.fy/F,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=W(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class d extends l{constructor(){super();const l=new Float32Array(1),t=new Int32Array(l.buffer),Z=U=>{l[0]=U;const F=t[0],Q=F>>23&255;let Z,V=8388607&F;return 0==Q?Z=0:Q<113?(Z=0,V|=8388608,V>>=113-Q,16777216&V&&(Z=1,V=0)):Q<142?Z=Q-112:(Z=31,V=0),(F>>31&1)<<15|Z<<10|V>>13},V=(U,F)=>(Z(U)|Z(F)<<16)>>>0,n={type:"change"};this._data=new Uint32Array(0),this._vertexCount=0,this._width=2048,this._height=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this.setData=l=>{this._vertexCount=l.length/d.RowLength,this._height=Math.ceil(2*this._vertexCount/this._width),this._data=new Uint32Array(this._width*this._height*4),this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount);const t=new Float32Array(l.buffer),Z=new Uint8Array(l.buffer),R=new Uint8Array(this._data.buffer),W=new Float32Array(this._data.buffer);for(let l=0;l<this._vertexCount;l++){this._positions[3*l+0]=t[8*l+0],this._positions[3*l+1]=t[8*l+1],this._positions[3*l+2]=t[8*l+2],this._rotations[4*l+0]=(Z[32*l+28+0]-128)/128,this._rotations[4*l+1]=(Z[32*l+28+1]-128)/128,this._rotations[4*l+2]=(Z[32*l+28+2]-128)/128,this._rotations[4*l+3]=(Z[32*l+28+3]-128)/128,this._scales[3*l+0]=t[8*l+3+0],this._scales[3*l+1]=t[8*l+3+1],this._scales[3*l+2]=t[8*l+3+2],W[8*l+0]=this._positions[3*l+0],W[8*l+1]=this._positions[3*l+1],W[8*l+2]=this._positions[3*l+2],R[4*(8*l+7)+0]=Z[32*l+24+0],R[4*(8*l+7)+1]=Z[32*l+24+1],R[4*(8*l+7)+2]=Z[32*l+24+2],R[4*(8*l+7)+3]=Z[32*l+24+3];const d=Q.RotationFromQuaternion(new F(this._rotations[4*l+1],this._rotations[4*l+2],this._rotations[4*l+3],-this._rotations[4*l+0])),n=Q.Diagonal(new U(this._scales[3*l+0],this._scales[3*l+1],this._scales[3*l+2])).multiply(d).buffer,e=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*l+4]=V(4*e[0],4*e[1]),this._data[8*l+5]=V(4*e[2],4*e[3]),this._data[8*l+6]=V(4*e[4],4*e[5])}this.dispatchEvent(n)},this.translate=U=>{const F=new Float32Array(this._data.buffer);for(let l=0;l<this._vertexCount;l++)this._positions[3*l+0]+=U.x,this._positions[3*l+1]+=U.y,this._positions[3*l+2]+=U.z,F[8*l+0]=this._positions[3*l+0],F[8*l+1]=this._positions[3*l+1],F[8*l+2]=this._positions[3*l+2];this.dispatchEvent(n)},this.rotate=l=>{const t=Q.RotationFromQuaternion(l).buffer,Z=new Float32Array(this._data.buffer);for(let d=0;d<this._vertexCount;d++){const n=this._positions[3*d+0],R=this._positions[3*d+1],W=this._positions[3*d+2];this._positions[3*d+0]=t[0]*n+t[1]*R+t[2]*W,this._positions[3*d+1]=t[3]*n+t[4]*R+t[5]*W,this._positions[3*d+2]=t[6]*n+t[7]*R+t[8]*W,Z[8*d+0]=this._positions[3*d+0],Z[8*d+1]=this._positions[3*d+1],Z[8*d+2]=this._positions[3*d+2];const e=new F(this._rotations[4*d+1],this._rotations[4*d+2],this._rotations[4*d+3],this._rotations[4*d+0]),i=l.multiply(e);this._rotations[4*d+1]=i.x,this._rotations[4*d+2]=i.y,this._rotations[4*d+3]=i.z,this._rotations[4*d+0]=i.w;const a=Q.RotationFromQuaternion(new F(this._rotations[4*d+1],this._rotations[4*d+2],this._rotations[4*d+3],-this._rotations[4*d+0])),h=Q.Diagonal(new U(this._scales[3*d+0],this._scales[3*d+1],this._scales[3*d+2])).multiply(a).buffer,B=[h[0]*h[0]+h[3]*h[3]+h[6]*h[6],h[0]*h[1]+h[3]*h[4]+h[6]*h[7],h[0]*h[2]+h[3]*h[5]+h[6]*h[8],h[1]*h[1]+h[4]*h[4]+h[7]*h[7],h[1]*h[2]+h[4]*h[5]+h[7]*h[8],h[2]*h[2]+h[5]*h[5]+h[8]*h[8]];this._data[8*d+4]=V(4*B[0],4*B[1]),this._data[8*d+5]=V(4*B[2],4*B[3]),this._data[8*d+6]=V(4*B[4],4*B[5])}this.dispatchEvent(n)},this.scale=l=>{const t=new Float32Array(this._data.buffer);for(let Z=0;Z<this.vertexCount;Z++){this._positions[3*Z+0]*=l.x,this._positions[3*Z+1]*=l.y,this._positions[3*Z+2]*=l.z,t[8*Z+0]=this._positions[3*Z+0],t[8*Z+1]=this._positions[3*Z+1],t[8*Z+2]=this._positions[3*Z+2],this._scales[3*Z+0]*=l.x,this._scales[3*Z+1]*=l.y,this._scales[3*Z+2]*=l.z;const d=Q.RotationFromQuaternion(new F(this._rotations[4*Z+1],this._rotations[4*Z+2],this._rotations[4*Z+3],-this._rotations[4*Z+0])),n=Q.Diagonal(new U(this._scales[3*Z+0],this._scales[3*Z+1],this._scales[3*Z+2])).multiply(d).buffer,R=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*Z+4]=V(4*R[0],4*R[1]),this._data[8*Z+5]=V(4*R[2],4*R[3]),this._data[8*Z+6]=V(4*R[4],4*R[5])}this.dispatchEvent(n)},this.limitBox=(U,F,l,t,Q,Z)=>{if(U>=F)throw new Error(`xMin (${U}) must be smaller than xMax (${F})`);if(l>=t)throw new Error(`yMin (${l}) must be smaller than yMax (${t})`);if(Q>=Z)throw new Error(`zMin (${Q}) must be smaller than zMax (${Z})`);const V=new Uint8Array(this._vertexCount);for(let d=0;d<this._vertexCount;d++){const n=this._positions[3*d+0],R=this._positions[3*d+1],W=this._positions[3*d+2];n>=U&&n<=F&&R>=l&&R<=t&&W>=Q&&W<=Z&&(V[d]=1)}let d=0;for(let U=0;U<this._vertexCount;U++)0!==V[U]&&(this._data[8*d+0]=this._data[8*U+0],this._data[8*d+1]=this._data[8*U+1],this._data[8*d+2]=this._data[8*U+2],this._data[8*d+3]=this._data[8*U+3],this._data[8*d+4]=this._data[8*U+4],this._data[8*d+5]=this._data[8*U+5],this._data[8*d+6]=this._data[8*U+6],this._data[8*d+7]=this._data[8*U+7],this._positions[3*d+0]=this._positions[3*U+0],this._positions[3*d+1]=this._positions[3*U+1],this._positions[3*d+2]=this._positions[3*U+2],this._rotations[4*d+0]=this._rotations[4*U+0],this._rotations[4*d+1]=this._rotations[4*U+1],this._rotations[4*d+2]=this._rotations[4*U+2],this._rotations[4*d+3]=this._rotations[4*U+3],this._scales[3*d+0]=this._scales[3*U+0],this._scales[3*d+1]=this._scales[3*U+1],this._scales[3*d+2]=this._scales[3*U+2],d+=1);this._height=Math.ceil(2*d/this._width),this._vertexCount=d,this._data=new Uint32Array(this._data.buffer,0,this._width*this._height*4),this._positions=new Float32Array(this._positions.buffer,0,3*d),this._rotations=new Float32Array(this._rotations.buffer,0,4*d),this._scales=new Float32Array(this._scales.buffer,0,3*d),this.dispatchEvent(n)},this.saveToFile=U=>{if(!document)return;const F=new Uint8Array(this._vertexCount*d.RowLength),l=new Float32Array(F.buffer),t=new Uint8Array(F.buffer),Q=new Uint8Array(this._data.buffer);for(let U=0;U<this._vertexCount;U++)l[8*U+0]=this._positions[3*U+0],l[8*U+1]=this._positions[3*U+1],l[8*U+2]=this._positions[3*U+2],t[32*U+24+0]=Q[4*(8*U+7)+0],t[32*U+24+1]=Q[4*(8*U+7)+1],t[32*U+24+2]=Q[4*(8*U+7)+2],t[32*U+24+3]=Q[4*(8*U+7)+3],l[8*U+3+0]=this._scales[3*U+0],l[8*U+3+1]=this._scales[3*U+1],l[8*U+3+2]=this._scales[3*U+2],t[32*U+28+0]=128*this._rotations[4*U+0]+128&255,t[32*U+28+1]=128*this._rotations[4*U+1]+128&255,t[32*U+28+2]=128*this._rotations[4*U+2]+128&255,t[32*U+28+3]=128*this._rotations[4*U+3]+128&255;const Z=new Blob([F.buffer],{type:"application/octet-stream"}),V=document.createElement("a");V.download=U,V.href=URL.createObjectURL(Z),V.click()}}get data(){return this._data}get vertexCount(){return this._vertexCount}get width(){return this._width}get height(){return this._height}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}}d.RowLength=32;class n{static async LoadAsync(U,F,l){const t=await fetch(U,{mode:"cors",credentials:"omit"});if(200!=t.status)throw new Error(t.status+" Unable to load "+t.url);const Q=t.body.getReader(),Z=parseInt(t.headers.get("content-length")),V=new Uint8Array(Z);let d=0;for(;;){const{done:U,value:F}=await Q.read();if(U)break;V.set(F,d),d+=F.length,null==l||l(d/Z)}F.setData(V)}static async LoadFromFileAsync(U,F,l){const t=new FileReader;t.onload=U=>{const l=new Uint8Array(U.target.result);F.setData(l)},t.onprogress=U=>{null==l||l(U.loaded/U.total)},t.readAsArrayBuffer(U),await new Promise((U=>{t.onloadend=()=>{U()}}))}}class R{static async LoadAsync(U,F,l,t=""){const Q=await fetch(U,{mode:"cors",credentials:"omit"});if(200!=Q.status)throw new Error(Q.status+" Unable to load "+Q.url);const Z=Q.body.getReader(),V=parseInt(Q.headers.get("content-length")),d=new Uint8Array(V);let n=0;for(;;){const{done:U,value:F}=await Z.read();if(U)break;d.set(F,n),n+=F.length,null==l||l(n/V)}if(112!==d[0]||108!==d[1]||121!==d[2]||10!==d[3])throw new Error("Invalid PLY file");const R=new Uint8Array(this._ParsePLYBuffer(d.buffer,t));F.setData(R)}static async LoadFromFileAsync(U,F,l,t=""){const Q=new FileReader;Q.onload=U=>{const l=new Uint8Array(this._ParsePLYBuffer(U.target.result,t));F.setData(l)},Q.onprogress=U=>{null==l||l(U.loaded/U.total)},Q.readAsArrayBuffer(U),await new Promise((U=>{Q.onloadend=()=>{U()}}))}static _ParsePLYBuffer(l,t){const Q=new Uint8Array(l),Z=(new TextDecoder).decode(Q.slice(0,10240)),V="end_header\n",n=Z.indexOf(V);if(n<0)throw new Error("Unable to read .ply file header");const R=parseInt(/element vertex (\d+)\n/.exec(Z)[1]);let W=0;const e={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},i=[];for(const U of Z.slice(0,n).split("\n").filter((U=>U.startsWith("property ")))){const[F,l,t]=U.split(" ");if(i.push({name:t,type:l,offset:W}),!e[l])throw new Error(`Unsupported property type: ${l}`);W+=e[l]}const a=new DataView(l,n+11),h=new ArrayBuffer(d.RowLength*R),B=F.FromEuler(new U(Math.PI/2,0,0));for(let U=0;U<R;U++){const l=new Float32Array(h,U*d.RowLength,3),Q=new Float32Array(h,U*d.RowLength+12,3),Z=new Uint8ClampedArray(h,U*d.RowLength+24,4),V=new Uint8ClampedArray(h,U*d.RowLength+28,4);let n=255,R=0,e=0,c=0;i.forEach((F=>{let t;switch(F.type){case"float":t=a.getFloat32(F.offset+U*W,!0);break;case"int":t=a.getInt32(F.offset+U*W,!0);break;default:throw new Error(`Unsupported property type: ${F.type}`)}switch(F.name){case"x":l[0]=t;break;case"y":l[1]=t;break;case"z":l[2]=t;break;case"scale_0":Q[0]=Math.exp(t);break;case"scale_1":Q[1]=Math.exp(t);break;case"scale_2":Q[2]=Math.exp(t);break;case"red":Z[0]=t;break;case"green":Z[1]=t;break;case"blue":Z[2]=t;break;case"f_dc_0":Z[0]=255*(.5+this.SH_C0*t);break;case"f_dc_1":Z[1]=255*(.5+this.SH_C0*t);break;case"f_dc_2":Z[2]=255*(.5+this.SH_C0*t);break;case"f_dc_3":Z[3]=255*(.5+this.SH_C0*t);break;case"opacity":Z[3]=1/(1+Math.exp(-t))*255;break;case"rot_0":n=t;break;case"rot_1":R=t;break;case"rot_2":e=t;break;case"rot_3":c=t}}));let s=new F(R,e,c,n);switch(t){case"polycam":{const U=l[1];l[1]=-l[2],l[2]=U,s=B.multiply(s);break}case"":break;default:throw new Error(`Unsupported format: ${t}`)}s=s.normalize(),V[0]=128*s.w+128,V[1]=128*s.x+128,V[2]=128*s.y+128,V[3]=128*s.z+128}return h}}function W(U,F,l){var t=void 0===F?null:F,Q=function(U,F){var l=atob(U);if(F){for(var t=new Uint8Array(l.length),Q=0,Z=l.length;Q<Z;++Q)t[Q]=l.charCodeAt(Q);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return l}(U,void 0!==l&&l),Z=Q.indexOf("\n",10)+1,V=Q.substring(Z)+(t?"//# sourceMappingURL="+t:""),d=new Blob([V],{type:"application/javascript"});return URL.createObjectURL(d)}R.SH_C0=.28209479177387814;var e,i,a,h,B=(e="",i=null,a=!1,function(U){return h=h||W(e,i,a),new Worker(h,U)});class c{constructor(U=1){let F,l,t,Q=0,Z=!1;this.init=(U,V)=>{Q=0,Z=!0,F=U,l=U.gl.getUniformLocation(V,"u_useDepthFade"),F.gl.uniform1i(l,1),t=U.gl.getUniformLocation(V,"u_depthFade"),F.gl.uniform1f(t,Q)},this.render=()=>{Z&&(Q=Math.min(Q+.01*U,1),Q>=1&&(Z=!1,F.gl.uniform1i(l,0)),F.gl.uniform1f(t,Q))}}}class s{constructor(U=null,F=null){const l=U||document.createElement("canvas");U||(l.style.display="block",l.style.boxSizing="border-box",l.style.width="100%",l.style.height="100%",l.style.margin="0",l.style.padding="0",document.body.appendChild(l)),l.style.background="#000",this.domElement=l;const t=l.getContext("webgl2",{antialias:!1});this.gl=t;const Q=F||[];let Z,V,d,n,R,W,e,i,a,h,s,J,b,m;F||Q.push(new c);let o=!1;this.resize=()=>{const U=l.clientWidth,F=l.clientHeight;l.width===U&&l.height===F||this.setSize(U,F)},this.setSize=(U,F)=>{l.width=U,l.height=F,V&&(t.viewport(0,0,l.width,l.height),V.update(l.width,l.height),e=t.getUniformLocation(W,"projection"),t.uniformMatrix4fv(e,!1,V.projectionMatrix.buffer),i=t.getUniformLocation(W,"viewport"),t.uniform2fv(i,new Float32Array([l.width,l.height])))};const N=()=>{d=new B;const U={positions:Z.positions,vertexCount:Z.vertexCount};d.postMessage({scene:U}),t.viewport(0,0,l.width,l.height),n=t.createShader(t.VERTEX_SHADER),t.shaderSource(n,"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool u_useDepthFade;\nuniform float u_depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n\n    float scalingFactor = 1.0;\n\n    if(u_useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport \n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n\n}\n"),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(n)),R=t.createShader(t.FRAGMENT_SHADER),t.shaderSource(R,"#version 300 es\nprecision highp float;\n\nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"),t.compileShader(R),t.getShaderParameter(R,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(R)),W=t.createProgram(),t.attachShader(W,n),t.attachShader(W,R),t.linkProgram(W),t.useProgram(W),t.getProgramParameter(W,t.LINK_STATUS)||console.error(t.getProgramInfoLog(W)),t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFuncSeparate(t.ONE_MINUS_DST_ALPHA,t.ONE,t.ONE_MINUS_DST_ALPHA,t.ONE),t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),V.update(l.width,l.height),e=t.getUniformLocation(W,"projection"),t.uniformMatrix4fv(e,!1,V.projectionMatrix.buffer),i=t.getUniformLocation(W,"viewport"),t.uniform2fv(i,new Float32Array([l.width,l.height])),a=t.getUniformLocation(W,"focal"),t.uniform2fv(a,new Float32Array([V.fx,V.fy])),h=t.getUniformLocation(W,"view"),t.uniformMatrix4fv(h,!1,V.viewMatrix.buffer);const F=new Float32Array([-2,-2,2,-2,2,2,-2,2]);m=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,m),t.bufferData(t.ARRAY_BUFFER,F,t.STATIC_DRAW),J=t.getAttribLocation(W,"position"),t.enableVertexAttribArray(J),t.vertexAttribPointer(J,2,t.FLOAT,!1,0,0);const c=t.createTexture();t.bindTexture(t.TEXTURE_2D,c),s=t.getUniformLocation(W,"u_texture"),t.uniform1i(s,0);const N=t.createBuffer();b=t.getAttribLocation(W,"index"),t.enableVertexAttribArray(b),t.bindBuffer(t.ARRAY_BUFFER,N),t.vertexAttribIPointer(b,1,t.INT,0,0),t.vertexAttribDivisor(b,1),t.bindTexture(t.TEXTURE_2D,c),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32UI,Z.width,Z.height,0,t.RGBA_INTEGER,t.UNSIGNED_INT,Z.data),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,c);for(const U of Q)U.init(this,W);d.onmessage=U=>{if(U.data.depthIndex){const{depthIndex:F}=U.data;t.bindBuffer(t.ARRAY_BUFFER,N),t.bufferData(t.ARRAY_BUFFER,F,t.STATIC_DRAW)}},o=!0},G=()=>{o&&this.dispose(),N()};this.render=(U,F)=>{if(U===Z&&F===V||(o&&this.dispose(),V=F,U!==Z&&(Z&&Z.removeEventListener("change",G),Z=U,Z.addEventListener("change",G)),N()),V.update(l.width,l.height),d.postMessage({viewProj:V.viewProj}),Z.vertexCount>0){for(const U of Q)U.render();t.uniformMatrix4fv(h,!1,V.viewMatrix.buffer),t.clear(t.COLOR_BUFFER_BIT),t.drawArraysInstanced(t.TRIANGLE_FAN,0,4,Z.vertexCount)}else t.clear(t.COLOR_BUFFER_BIT)},this.dispose=()=>{d.terminate(),t.deleteShader(n),t.deleteShader(R),t.deleteProgram(W),t.deleteBuffer(m),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),o=!1},this.resize()}}class J{constructor(l,t,Z=.5,V=.5,d=5,n=!0,R=new U){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let W=R.clone(),e=W.clone(),i=Z,a=V,h=d,B=!1,c=!1,s=0,J=0,b=0;const m={};let o=null,N=!1;const G=()=>{if(!o||N)return;const F=o.rotation.toEuler();i=-F.y,a=-F.x;const l=o.position.x-h*Math.sin(i)*Math.cos(a),t=o.position.y+h*Math.sin(a),Q=o.position.z+h*Math.cos(i)*Math.cos(a);e=new U(l,t,Q)};this.attach=U=>{o&&this.detach(),o=U,o.addEventListener("change",G)},this.detach=()=>{o&&(o.removeEventListener("change",G),o=null)},this.attach(l),this.setCameraTarget=F=>{if(!o)return;const l=F.x-o.position.x,t=F.y-o.position.y,Q=F.z-o.position.z;h=Math.sqrt(l*l+t*t+Q*Q),a=Math.atan2(t,Math.sqrt(l*l+Q*Q)),i=-Math.atan2(l,Q),e=new U(F.x,F.y,F.z)};const X=()=>.1+.9*(h-this.minZoom)/(this.maxZoom-this.minZoom),r=U=>{m[U.code]=!0,"ArrowUp"===U.code&&(m.KeyW=!0),"ArrowDown"===U.code&&(m.KeyS=!0),"ArrowLeft"===U.code&&(m.KeyA=!0),"ArrowRight"===U.code&&(m.KeyD=!0)},p=U=>{m[U.code]=!1,"ArrowUp"===U.code&&(m.KeyW=!1),"ArrowDown"===U.code&&(m.KeyS=!1),"ArrowLeft"===U.code&&(m.KeyA=!1),"ArrowRight"===U.code&&(m.KeyD=!1)},y=U=>{C(U),B=!0,c=2===U.button,J=U.clientX,b=U.clientY,window.addEventListener("mouseup",S)},S=U=>{C(U),B=!1,c=!1,window.removeEventListener("mouseup",S)},k=F=>{if(C(F),!B||!o)return;const l=F.clientX-J,t=F.clientY-b;if(c){const F=X(),Z=-l*this.panSpeed*.01*F,V=-t*this.panSpeed*.01*F,d=Q.RotationFromQuaternion(o.rotation).buffer,n=new U(d[0],d[3],d[6]),R=new U(d[1],d[4],d[7]);e=e.add(n.multiply(Z)),e=e.add(R.multiply(V))}else i-=l*this.orbitSpeed*.003,a+=t*this.orbitSpeed*.003,a=Math.min(Math.max(a,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);J=F.clientX,b=F.clientY},Y=U=>{C(U);const F=X();h+=U.deltaY*this.zoomSpeed*.025*F,h=Math.min(Math.max(h,this.minZoom),this.maxZoom)},u=U=>{if(C(U),1===U.touches.length)B=!0,c=!1,J=U.touches[0].clientX,b=U.touches[0].clientY,s=0;else if(2===U.touches.length){B=!0,c=!0,J=(U.touches[0].clientX+U.touches[1].clientX)/2,b=(U.touches[0].clientY+U.touches[1].clientY)/2;const F=U.touches[0].clientX-U.touches[1].clientX,l=U.touches[0].clientY-U.touches[1].clientY;s=Math.sqrt(F*F+l*l)}},T=U=>{C(U),B=!1,c=!1},I=F=>{if(C(F),B&&o)if(c){const l=X(),t=F.touches[0].clientX-F.touches[1].clientX,Z=F.touches[0].clientY-F.touches[1].clientY,V=Math.sqrt(t*t+Z*Z);h+=(s-V)*this.zoomSpeed*.1*l,h=Math.min(Math.max(h,this.minZoom),this.maxZoom),s=V;const d=(F.touches[0].clientX+F.touches[1].clientX)/2,n=(F.touches[0].clientY+F.touches[1].clientY)/2,R=d-J,W=n-b,i=Q.RotationFromQuaternion(o.rotation).buffer,a=new U(i[0],i[3],i[6]),B=new U(i[1],i[4],i[7]);e=e.add(a.multiply(-R*this.panSpeed*.025*l)),e=e.add(B.multiply(-W*this.panSpeed*.025*l)),J=d,b=n}else{const U=F.touches[0].clientX-J,l=F.touches[0].clientY-b;i-=U*this.orbitSpeed*.003,a+=l*this.orbitSpeed*.003,a=Math.min(Math.max(a,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),J=F.touches[0].clientX,b=F.touches[0].clientY}},E=(U,F,l)=>(1-l)*U+l*F;this.update=()=>{if(!o)return;N=!0,Z=E(Z,i,this.dampening),V=E(V,a,this.dampening),d=E(d,h,this.dampening),W=W.lerp(e,this.dampening);const l=W.x+d*Math.sin(Z)*Math.cos(V),t=W.y-d*Math.sin(V),n=W.z-d*Math.cos(Z)*Math.cos(V);o.position=new U(l,t,n);const R=W.subtract(o.position).normalize(),B=Math.asin(-R.y),c=Math.atan2(R.x,R.z);o.rotation=F.FromEuler(new U(B,c,0));const s=.025,J=.01,b=Q.RotationFromQuaternion(o.rotation).buffer,G=new U(-b[2],-b[5],-b[8]),X=new U(b[0],b[3],b[6]);m.KeyS&&(e=e.add(G.multiply(s))),m.KeyW&&(e=e.subtract(G.multiply(s))),m.KeyA&&(e=e.subtract(X.multiply(s))),m.KeyD&&(e=e.add(X.multiply(s))),m.KeyE&&(i+=J),m.KeyQ&&(i-=J),m.KeyR&&(a+=J),m.KeyF&&(a-=J),N=!1};const C=U=>{U.preventDefault(),U.stopPropagation()};this.dispose=()=>{t.removeEventListener("dragenter",C),t.removeEventListener("dragover",C),t.removeEventListener("dragleave",C),t.removeEventListener("contextmenu",C),t.removeEventListener("mousedown",y),t.removeEventListener("mousemove",k),t.removeEventListener("wheel",Y),t.removeEventListener("touchstart",u),t.removeEventListener("touchend",T),t.removeEventListener("touchmove",I),n&&(window.removeEventListener("keydown",r),window.removeEventListener("keyup",p))},n&&(window.addEventListener("keydown",r),window.addEventListener("keyup",p)),t.addEventListener("dragenter",C),t.addEventListener("dragover",C),t.addEventListener("dragleave",C),t.addEventListener("contextmenu",C),t.addEventListener("mousedown",y),t.addEventListener("mousemove",k),t.addEventListener("wheel",Y),t.addEventListener("touchstart",u),t.addEventListener("touchend",T),t.addEventListener("touchmove",I),this.update()}}class b{init(U,F){}render(){}}export{V as Camera,c as FadeInPass,n as Loader,Q as Matrix3,Z as Matrix4,J as OrbitControls,R as PLYLoader,F as Quaternion,d as Scene,b as ShaderPass,U as Vector3,s as WebGLRenderer};
//# sourceMappingURL=index.js.map
