class A{constructor(A=0,Q=0,F=0){this.x=A,this.y=Q,this.z=F}equals(A){return this.x===A.x&&(this.y===A.y&&this.z===A.z)}add(Q){return"number"==typeof Q?new A(this.x+Q,this.y+Q,this.z+Q):new A(this.x+Q.x,this.y+Q.y,this.z+Q.z)}subtract(Q){return"number"==typeof Q?new A(this.x-Q,this.y-Q,this.z-Q):new A(this.x-Q.x,this.y-Q.y,this.z-Q.z)}multiply(Q){return"number"==typeof Q?new A(this.x*Q,this.y*Q,this.z*Q):Q instanceof A?new A(this.x*Q.x,this.y*Q.y,this.z*Q.z):new A(this.x*Q.buffer[0]+this.y*Q.buffer[4]+this.z*Q.buffer[8]+Q.buffer[12],this.x*Q.buffer[1]+this.y*Q.buffer[5]+this.z*Q.buffer[9]+Q.buffer[13],this.x*Q.buffer[2]+this.y*Q.buffer[6]+this.z*Q.buffer[10]+Q.buffer[14])}cross(Q){const F=this.y*Q.z-this.z*Q.y,B=this.z*Q.x-this.x*Q.z,U=this.x*Q.y-this.y*Q.x;return new A(F,B,U)}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z}lerp(Q,F){return new A(this.x+(Q.x-this.x)*F,this.y+(Q.y-this.y)*F,this.z+(Q.z-this.z)*F)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(A){return Math.sqrt((this.x-A.x)**2+(this.y-A.y)**2+(this.z-A.z)**2)}normalize(){const Q=this.magnitude();return new A(this.x/Q,this.y/Q,this.z/Q)}flat(){return[this.x,this.y,this.z]}clone(){return new A(this.x,this.y,this.z)}toString(){return`[${this.flat().join(", ")}]`}static One(Q=1){return new A(Q,Q,Q)}}class Q{constructor(A=0,Q=0,F=0,B=1){this.x=A,this.y=Q,this.z=F,this.w=B}equals(A){return this.x===A.x&&(this.y===A.y&&(this.z===A.z&&this.w===A.w))}normalize(){const A=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new Q(this.x/A,this.y/A,this.z/A,this.w/A)}multiply(A){const F=this.w,B=this.x,U=this.y,l=this.z,t=A.w,d=A.x,n=A.y,V=A.z;return new Q(F*d+B*t+U*V-l*n,F*n-B*V+U*t+l*d,F*V+B*n-U*d+l*t,F*t-B*d-U*n-l*V)}inverse(){const A=this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w;return new Q(-this.x/A,-this.y/A,-this.z/A,this.w/A)}apply(F){const B=new Q(F.x,F.y,F.z,0),U=new Q(-this.x,-this.y,-this.z,this.w),l=this.multiply(B).multiply(U);return new A(l.x,l.y,l.z)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new Q(this.x,this.y,this.z,this.w)}static FromEuler(A){const F=A.x/2,B=A.y/2,U=A.z/2,l=Math.cos(B),t=Math.sin(B),d=Math.cos(F),n=Math.sin(F),V=Math.cos(U),Z=Math.sin(U);return new Q(l*n*V+t*d*Z,t*d*V-l*n*Z,l*d*Z-t*n*V,l*d*V+t*n*Z)}toEuler(){const Q=2*(this.w*this.x+this.y*this.z),F=1-2*(this.x*this.x+this.y*this.y),B=Math.atan2(Q,F);let U;const l=2*(this.w*this.y-this.z*this.x);U=Math.abs(l)>=1?Math.sign(l)*Math.PI/2:Math.asin(l);const t=2*(this.w*this.z+this.x*this.y),d=1-2*(this.y*this.y+this.z*this.z),n=Math.atan2(t,d);return new A(B,U,n)}static FromMatrix3(A){const F=A.buffer,B=F[0]+F[4]+F[8];let U,l,t,d;if(B>0){const A=.5/Math.sqrt(B+1);d=.25/A,U=(F[7]-F[5])*A,l=(F[2]-F[6])*A,t=(F[3]-F[1])*A}else if(F[0]>F[4]&&F[0]>F[8]){const A=2*Math.sqrt(1+F[0]-F[4]-F[8]);d=(F[7]-F[5])/A,U=.25*A,l=(F[1]+F[3])/A,t=(F[2]+F[6])/A}else if(F[4]>F[8]){const A=2*Math.sqrt(1+F[4]-F[0]-F[8]);d=(F[2]-F[6])/A,U=(F[1]+F[3])/A,l=.25*A,t=(F[5]+F[7])/A}else{const A=2*Math.sqrt(1+F[8]-F[0]-F[4]);d=(F[3]-F[1])/A,U=(F[2]+F[6])/A,l=(F[5]+F[7])/A,t=.25*A}return new Q(U,l,t,d)}static FromAxisAngle(A,F){const B=F/2,U=Math.sin(B),l=Math.cos(B);return new Q(A.x*U,A.y*U,A.z*U,l)}toString(){return`[${this.flat().join(", ")}]`}}class F{constructor(){const A=new Map;this.addEventListener=(Q,F)=>{A.has(Q)||A.set(Q,new Set),A.get(Q).add(F)},this.removeEventListener=(Q,F)=>{A.has(Q)&&A.get(Q).delete(F)},this.hasEventListener=(Q,F)=>!!A.has(Q)&&A.get(Q).has(F),this.dispatchEvent=Q=>{if(A.has(Q.type))for(const F of A.get(Q.type))F(Q)}}}class B{constructor(A=1,Q=0,F=0,B=0,U=0,l=1,t=0,d=0,n=0,V=0,Z=1,e=0,I=0,R=0,a=0,g=1){this.buffer=[A,Q,F,B,U,l,t,d,n,V,Z,e,I,R,a,g]}equals(A){if(this.buffer.length!==A.buffer.length)return!1;if(this.buffer===A.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==A.buffer[Q])return!1;return!0}multiply(A){const Q=this.buffer,F=A.buffer;return new B(F[0]*Q[0]+F[1]*Q[4]+F[2]*Q[8]+F[3]*Q[12],F[0]*Q[1]+F[1]*Q[5]+F[2]*Q[9]+F[3]*Q[13],F[0]*Q[2]+F[1]*Q[6]+F[2]*Q[10]+F[3]*Q[14],F[0]*Q[3]+F[1]*Q[7]+F[2]*Q[11]+F[3]*Q[15],F[4]*Q[0]+F[5]*Q[4]+F[6]*Q[8]+F[7]*Q[12],F[4]*Q[1]+F[5]*Q[5]+F[6]*Q[9]+F[7]*Q[13],F[4]*Q[2]+F[5]*Q[6]+F[6]*Q[10]+F[7]*Q[14],F[4]*Q[3]+F[5]*Q[7]+F[6]*Q[11]+F[7]*Q[15],F[8]*Q[0]+F[9]*Q[4]+F[10]*Q[8]+F[11]*Q[12],F[8]*Q[1]+F[9]*Q[5]+F[10]*Q[9]+F[11]*Q[13],F[8]*Q[2]+F[9]*Q[6]+F[10]*Q[10]+F[11]*Q[14],F[8]*Q[3]+F[9]*Q[7]+F[10]*Q[11]+F[11]*Q[15],F[12]*Q[0]+F[13]*Q[4]+F[14]*Q[8]+F[15]*Q[12],F[12]*Q[1]+F[13]*Q[5]+F[14]*Q[9]+F[15]*Q[13],F[12]*Q[2]+F[13]*Q[6]+F[14]*Q[10]+F[15]*Q[14],F[12]*Q[3]+F[13]*Q[7]+F[14]*Q[11]+F[15]*Q[15])}clone(){const A=this.buffer;return new B(A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15])}determinant(){const A=this.buffer;return A[12]*A[9]*A[6]*A[3]-A[8]*A[13]*A[6]*A[3]-A[12]*A[5]*A[10]*A[3]+A[4]*A[13]*A[10]*A[3]+A[8]*A[5]*A[14]*A[3]-A[4]*A[9]*A[14]*A[3]-A[12]*A[9]*A[2]*A[7]+A[8]*A[13]*A[2]*A[7]+A[12]*A[1]*A[10]*A[7]-A[0]*A[13]*A[10]*A[7]-A[8]*A[1]*A[14]*A[7]+A[0]*A[9]*A[14]*A[7]+A[12]*A[5]*A[2]*A[11]-A[4]*A[13]*A[2]*A[11]-A[12]*A[1]*A[6]*A[11]+A[0]*A[13]*A[6]*A[11]+A[4]*A[1]*A[14]*A[11]-A[0]*A[5]*A[14]*A[11]-A[8]*A[5]*A[2]*A[15]+A[4]*A[9]*A[2]*A[15]+A[8]*A[1]*A[6]*A[15]-A[0]*A[9]*A[6]*A[15]-A[4]*A[1]*A[10]*A[15]+A[0]*A[5]*A[10]*A[15]}invert(){const A=this.buffer,Q=this.determinant();if(0===Q)throw new Error("Matrix is not invertible.");const F=1/Q;return new B(F*(A[5]*A[10]*A[15]-A[5]*A[11]*A[14]-A[9]*A[6]*A[15]+A[9]*A[7]*A[14]+A[13]*A[6]*A[11]-A[13]*A[7]*A[10]),F*(-A[1]*A[10]*A[15]+A[1]*A[11]*A[14]+A[9]*A[2]*A[15]-A[9]*A[3]*A[14]-A[13]*A[2]*A[11]+A[13]*A[3]*A[10]),F*(A[1]*A[6]*A[15]-A[1]*A[7]*A[14]-A[5]*A[2]*A[15]+A[5]*A[3]*A[14]+A[13]*A[2]*A[7]-A[13]*A[3]*A[6]),F*(-A[1]*A[6]*A[11]+A[1]*A[7]*A[10]+A[5]*A[2]*A[11]-A[5]*A[3]*A[10]-A[9]*A[2]*A[7]+A[9]*A[3]*A[6]),F*(-A[4]*A[10]*A[15]+A[4]*A[11]*A[14]+A[8]*A[6]*A[15]-A[8]*A[7]*A[14]-A[12]*A[6]*A[11]+A[12]*A[7]*A[10]),F*(A[0]*A[10]*A[15]-A[0]*A[11]*A[14]-A[8]*A[2]*A[15]+A[8]*A[3]*A[14]+A[12]*A[2]*A[11]-A[12]*A[3]*A[10]),F*(-A[0]*A[6]*A[15]+A[0]*A[7]*A[14]+A[4]*A[2]*A[15]-A[4]*A[3]*A[14]-A[12]*A[2]*A[7]+A[12]*A[3]*A[6]),F*(A[0]*A[6]*A[11]-A[0]*A[7]*A[10]-A[4]*A[2]*A[11]+A[4]*A[3]*A[10]+A[8]*A[2]*A[7]-A[8]*A[3]*A[6]),F*(A[4]*A[9]*A[15]-A[4]*A[11]*A[13]-A[8]*A[5]*A[15]+A[8]*A[7]*A[13]+A[12]*A[5]*A[11]-A[12]*A[7]*A[9]),F*(-A[0]*A[9]*A[15]+A[0]*A[11]*A[13]+A[8]*A[1]*A[15]-A[8]*A[3]*A[13]-A[12]*A[1]*A[11]+A[12]*A[3]*A[9]),F*(A[0]*A[5]*A[15]-A[0]*A[7]*A[13]-A[4]*A[1]*A[15]+A[4]*A[3]*A[13]+A[12]*A[1]*A[7]-A[12]*A[3]*A[5]),F*(-A[0]*A[5]*A[11]+A[0]*A[7]*A[9]+A[4]*A[1]*A[11]-A[4]*A[3]*A[9]-A[8]*A[1]*A[7]+A[8]*A[3]*A[5]),F*(-A[4]*A[9]*A[14]+A[4]*A[10]*A[13]+A[8]*A[5]*A[14]-A[8]*A[6]*A[13]-A[12]*A[5]*A[10]+A[12]*A[6]*A[9]),F*(A[0]*A[9]*A[14]-A[0]*A[10]*A[13]-A[8]*A[1]*A[14]+A[8]*A[2]*A[13]+A[12]*A[1]*A[10]-A[12]*A[2]*A[9]),F*(-A[0]*A[5]*A[14]+A[0]*A[6]*A[13]+A[4]*A[1]*A[14]-A[4]*A[2]*A[13]-A[12]*A[1]*A[6]+A[12]*A[2]*A[5]),F*(A[0]*A[5]*A[10]-A[0]*A[6]*A[9]-A[4]*A[1]*A[10]+A[4]*A[2]*A[9]+A[8]*A[1]*A[6]-A[8]*A[2]*A[5]))}static Compose(A,Q,F){const U=Q.x,l=Q.y,t=Q.z,d=Q.w,n=U+U,V=l+l,Z=t+t,e=U*n,I=U*V,R=U*Z,a=l*V,g=l*Z,i=t*Z,c=d*n,W=d*V,C=d*Z,h=F.x,s=F.y,o=F.z;return new B((1-(a+i))*h,(I+C)*h,(R-W)*h,0,(I-C)*s,(1-(e+i))*s,(g+c)*s,0,(R+W)*o,(g-c)*o,(1-(e+a))*o,0,A.x,A.y,A.z,1)}toString(){return`[${this.buffer.join(", ")}]`}}class U extends Event{constructor(A){super("objectAdded"),this.object=A}}class l extends Event{constructor(A){super("objectRemoved"),this.object=A}}class t extends Event{constructor(A){super("objectChanged"),this.object=A}}class d extends F{constructor(){super(),this.positionChanged=!1,this.rotationChanged=!1,this.scaleChanged=!1,this._position=new A,this._rotation=new Q,this._scale=new A(1,1,1),this._transform=new B,this._changeEvent=new t(this),this.update=()=>{},this.applyPosition=()=>{this.position=new A},this.applyRotation=()=>{this.rotation=new Q},this.applyScale=()=>{this.scale=new A(1,1,1)}}_updateMatrix(){this._transform=B.Compose(this._position,this._rotation,this._scale)}get position(){return this._position}set position(A){this._position.equals(A)||(this._position=A,this.positionChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(A){this._rotation.equals(A)||(this._rotation=A,this.rotationChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get scale(){return this._scale}set scale(A){this._scale.equals(A)||(this._scale=A,this.scaleChanged=!0,this._updateMatrix(),this.dispatchEvent(this._changeEvent))}get forward(){let Q=new A(0,0,1);return Q=this.rotation.apply(Q),Q}get transform(){return this._transform}}class n{constructor(A=1,Q=0,F=0,B=0,U=1,l=0,t=0,d=0,n=1){this.buffer=[A,Q,F,B,U,l,t,d,n]}equals(A){if(this.buffer.length!==A.buffer.length)return!1;if(this.buffer===A.buffer)return!0;for(let Q=0;Q<this.buffer.length;Q++)if(this.buffer[Q]!==A.buffer[Q])return!1;return!0}multiply(A){const Q=this.buffer,F=A.buffer;return new n(F[0]*Q[0]+F[3]*Q[1]+F[6]*Q[2],F[1]*Q[0]+F[4]*Q[1]+F[7]*Q[2],F[2]*Q[0]+F[5]*Q[1]+F[8]*Q[2],F[0]*Q[3]+F[3]*Q[4]+F[6]*Q[5],F[1]*Q[3]+F[4]*Q[4]+F[7]*Q[5],F[2]*Q[3]+F[5]*Q[4]+F[8]*Q[5],F[0]*Q[6]+F[3]*Q[7]+F[6]*Q[8],F[1]*Q[6]+F[4]*Q[7]+F[7]*Q[8],F[2]*Q[6]+F[5]*Q[7]+F[8]*Q[8])}clone(){const A=this.buffer;return new n(A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8])}static Eye(A=1){return new n(A,0,0,0,A,0,0,0,A)}static Diagonal(A){return new n(A.x,0,0,0,A.y,0,0,0,A.z)}static RotationFromQuaternion(A){return new n(1-2*A.y*A.y-2*A.z*A.z,2*A.x*A.y-2*A.z*A.w,2*A.x*A.z+2*A.y*A.w,2*A.x*A.y+2*A.z*A.w,1-2*A.x*A.x-2*A.z*A.z,2*A.y*A.z-2*A.x*A.w,2*A.x*A.z-2*A.y*A.w,2*A.y*A.z+2*A.x*A.w,1-2*A.x*A.x-2*A.y*A.y)}static RotationFromEuler(A){const Q=Math.cos(A.x),F=Math.sin(A.x),B=Math.cos(A.y),U=Math.sin(A.y),l=Math.cos(A.z),t=Math.sin(A.z);return new n(...[B*l+U*F*t,-B*t+U*F*l,U*Q,Q*t,Q*l,-F,-U*l+B*F*t,U*t+B*F*l,B*Q])}toString(){return`[${this.buffer.join(", ")}]`}}class V{constructor(A=0,F=null,B=null,U=null,l=null){this.changed=!1,this.detached=!1,this._vertexCount=A,this._positions=F||new Float32Array(0),this._rotations=B||new Float32Array(0),this._scales=U||new Float32Array(0),this._colors=l||new Uint8Array(0),this._selection=new Uint8Array(this.vertexCount),this.translate=A=>{for(let Q=0;Q<this.vertexCount;Q++)this.positions[3*Q+0]+=A.x,this.positions[3*Q+1]+=A.y,this.positions[3*Q+2]+=A.z;this.changed=!0},this.rotate=A=>{const F=n.RotationFromQuaternion(A).buffer;for(let B=0;B<this.vertexCount;B++){const U=this.positions[3*B+0],l=this.positions[3*B+1],t=this.positions[3*B+2];this.positions[3*B+0]=F[0]*U+F[1]*l+F[2]*t,this.positions[3*B+1]=F[3]*U+F[4]*l+F[5]*t,this.positions[3*B+2]=F[6]*U+F[7]*l+F[8]*t;const d=new Q(this.rotations[4*B+1],this.rotations[4*B+2],this.rotations[4*B+3],this.rotations[4*B+0]),n=A.multiply(d);this.rotations[4*B+1]=n.x,this.rotations[4*B+2]=n.y,this.rotations[4*B+3]=n.z,this.rotations[4*B+0]=n.w}this.changed=!0},this.scale=A=>{for(let Q=0;Q<this.vertexCount;Q++)this.positions[3*Q+0]*=A.x,this.positions[3*Q+1]*=A.y,this.positions[3*Q+2]*=A.z,this.scales[3*Q+0]*=A.x,this.scales[3*Q+1]*=A.y,this.scales[3*Q+2]*=A.z;this.changed=!0},this.serialize=()=>{const A=new Uint8Array(this.vertexCount*V.RowLength),Q=new Float32Array(A.buffer),F=new Uint8Array(A.buffer);for(let A=0;A<this.vertexCount;A++)Q[8*A+0]=this.positions[3*A+0],Q[8*A+1]=this.positions[3*A+1],Q[8*A+2]=this.positions[3*A+2],F[32*A+24+0]=this.colors[4*A+0],F[32*A+24+1]=this.colors[4*A+1],F[32*A+24+2]=this.colors[4*A+2],F[32*A+24+3]=this.colors[4*A+3],Q[8*A+3+0]=this.scales[3*A+0],Q[8*A+3+1]=this.scales[3*A+1],Q[8*A+3+2]=this.scales[3*A+2],F[32*A+28+0]=128*this.rotations[4*A+0]+128&255,F[32*A+28+1]=128*this.rotations[4*A+1]+128&255,F[32*A+28+2]=128*this.rotations[4*A+2]+128&255,F[32*A+28+3]=128*this.rotations[4*A+3]+128&255;return A},this.reattach=(A,Q,F,B,U)=>{console.assert(A.byteLength===3*this.vertexCount*4,`Expected ${3*this.vertexCount*4} bytes, got ${A.byteLength} bytes`),this._positions=new Float32Array(A),this._rotations=new Float32Array(Q),this._scales=new Float32Array(F),this._colors=new Uint8Array(B),this._selection=new Uint8Array(U),this.detached=!1}}static Deserialize(A){const Q=A.length/V.RowLength,F=new Float32Array(3*Q),B=new Float32Array(4*Q),U=new Float32Array(3*Q),l=new Uint8Array(4*Q),t=new Float32Array(A.buffer),d=new Uint8Array(A.buffer);for(let A=0;A<Q;A++)F[3*A+0]=t[8*A+0],F[3*A+1]=t[8*A+1],F[3*A+2]=t[8*A+2],B[4*A+0]=(d[32*A+28+0]-128)/128,B[4*A+1]=(d[32*A+28+1]-128)/128,B[4*A+2]=(d[32*A+28+2]-128)/128,B[4*A+3]=(d[32*A+28+3]-128)/128,U[3*A+0]=t[8*A+3+0],U[3*A+1]=t[8*A+3+1],U[3*A+2]=t[8*A+3+2],l[4*A+0]=d[32*A+24+0],l[4*A+1]=d[32*A+24+1],l[4*A+2]=d[32*A+24+2],l[4*A+3]=d[32*A+24+3];return new V(Q,F,B,U,l)}get vertexCount(){return this._vertexCount}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get colors(){return this._colors}get selection(){return this._selection}}V.RowLength=32;class Z extends d{constructor(F=void 0){super(),this.selectedChanged=!1,this._selected=!1,this._data=F||new V,this.applyPosition=()=>{this.data.translate(this.position),this.position=new A},this.applyRotation=()=>{this.data.rotate(this.rotation),this.rotation=new Q},this.applyScale=()=>{this.data.scale(this.scale),this.scale=new A(1,1,1)}}saveToFile(A=null){if(!document)return;if(!A){const Q=new Date;A=`splat-${Q.getFullYear()}-${Q.getMonth()+1}-${Q.getDate()}.splat`}this.applyRotation(),this.applyScale(),this.applyPosition();const Q=this.data.serialize(),F=new Blob([Q],{type:"application/octet-stream"}),B=document.createElement("a");B.download=A,B.href=URL.createObjectURL(F),B.click()}get data(){return this._data}get selected(){return this._selected}set selected(A){this._selected!==A&&(this._selected=A,this.selectedChanged=!0,this.dispatchEvent(this._changeEvent))}}class e{constructor(){this._fx=1132,this._fy=1132,this._near=.1,this._far=100,this._width=512,this._height=512,this._projectionMatrix=new B,this._viewMatrix=new B,this._viewProj=new B,this._updateProjectionMatrix=()=>{this._projectionMatrix=new B(2*this.fx/this.width,0,0,0,0,-2*this.fy/this.height,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.update=(A,Q)=>{const F=n.RotationFromQuaternion(Q).buffer,U=A.flat();this._viewMatrix=new B(F[0],F[1],F[2],0,F[3],F[4],F[5],0,F[6],F[7],F[8],0,-U[0]*F[0]-U[1]*F[3]-U[2]*F[6],-U[0]*F[1]-U[1]*F[4]-U[2]*F[7],-U[0]*F[2]-U[1]*F[5]-U[2]*F[8],1),this._viewProj=this.projectionMatrix.multiply(this.viewMatrix)},this.setSize=(A,Q)=>{this._width=A,this._height=Q,this._updateProjectionMatrix()}}get fx(){return this._fx}set fx(A){this._fx!==A&&(this._fx=A,this._updateProjectionMatrix())}get fy(){return this._fy}set fy(A){this._fy!==A&&(this._fy=A,this._updateProjectionMatrix())}get near(){return this._near}set near(A){this._near!==A&&(this._near=A,this._updateProjectionMatrix())}get far(){return this._far}set far(A){this._far!==A&&(this._far=A,this._updateProjectionMatrix())}get width(){return this._width}get height(){return this._height}get projectionMatrix(){return this._projectionMatrix}get viewMatrix(){return this._viewMatrix}get viewProj(){return this._viewProj}}class I{constructor(A=0,Q=0,F=0,B=0){this.x=A,this.y=Q,this.z=F,this.w=B}equals(A){return this.x===A.x&&(this.y===A.y&&(this.z===A.z&&this.w===A.w))}add(A){return"number"==typeof A?new I(this.x+A,this.y+A,this.z+A,this.w+A):new I(this.x+A.x,this.y+A.y,this.z+A.z,this.w+A.w)}subtract(A){return"number"==typeof A?new I(this.x-A,this.y-A,this.z-A,this.w-A):new I(this.x-A.x,this.y-A.y,this.z-A.z,this.w-A.w)}multiply(A){return"number"==typeof A?new I(this.x*A,this.y*A,this.z*A,this.w*A):A instanceof I?new I(this.x*A.x,this.y*A.y,this.z*A.z,this.w*A.w):new I(this.x*A.buffer[0]+this.y*A.buffer[4]+this.z*A.buffer[8]+this.w*A.buffer[12],this.x*A.buffer[1]+this.y*A.buffer[5]+this.z*A.buffer[9]+this.w*A.buffer[13],this.x*A.buffer[2]+this.y*A.buffer[6]+this.z*A.buffer[10]+this.w*A.buffer[14],this.x*A.buffer[3]+this.y*A.buffer[7]+this.z*A.buffer[11]+this.w*A.buffer[15])}dot(A){return this.x*A.x+this.y*A.y+this.z*A.z+this.w*A.w}lerp(A,Q){return new I(this.x+(A.x-this.x)*Q,this.y+(A.y-this.y)*Q,this.z+(A.z-this.z)*Q,this.w+(A.w-this.w)*Q)}magnitude(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}distanceTo(A){return Math.sqrt((this.x-A.x)**2+(this.y-A.y)**2+(this.z-A.z)**2+(this.w-A.w)**2)}normalize(){const A=this.magnitude();return new I(this.x/A,this.y/A,this.z/A,this.w/A)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new I(this.x,this.y,this.z,this.w)}toString(){return`[${this.flat().join(", ")}]`}}class R extends d{constructor(Q=void 0){super(),this._data=Q||new e,this._position=new A(0,0,-5),this.update=()=>{this.data.update(this.position,this.rotation)},this.screenPointToRay=(Q,F)=>{const B=new I(Q,F,-1,1),U=this._data.projectionMatrix.invert(),l=B.multiply(U),t=this._data.viewMatrix.invert(),d=l.multiply(t);return new A(d.x/d.w,d.y/d.w,d.z/d.w).subtract(this.position).normalize()}}get data(){return this._data}}class a extends F{constructor(){super(),this._objects=[],this.addObject=A=>{this.objects.push(A),this.dispatchEvent(new U(A))},this.removeObject=A=>{const Q=this.objects.indexOf(A);if(Q<0)throw new Error("Object not found in scene");this.objects.splice(Q,1),this.dispatchEvent(new l(A))},this.findObject=A=>{for(const Q of this.objects)if(A(Q))return Q},this.findObjectOfType=A=>{for(const Q of this.objects)if(Q instanceof A)return Q},this.reset=()=>{const A=this.objects.slice();for(const Q of A)this.removeObject(Q)},this.reset()}saveToFile(A=null){if(!document)return;if(!A){const Q=new Date;A=`scene-${Q.getFullYear()}-${Q.getMonth()+1}-${Q.getDate()}.splat`}const Q=[];let F=0;for(const A of this.objects)if(A.applyRotation(),A.applyScale(),A.applyPosition(),A instanceof Z){const B=A.data.serialize();Q.push(B),F+=A.data.vertexCount}const B=new Uint8Array(F*V.RowLength);let U=0;for(const A of Q)B.set(A,U),U+=A.length;const l=new Blob([B.buffer],{type:"application/octet-stream"}),t=document.createElement("a");t.download=A,t.href=URL.createObjectURL(l),t.click()}get objects(){return this._objects}}class g{static async LoadAsync(A,Q,F,B=!1){const U=await fetch(A,{mode:"cors",credentials:"omit",cache:B?"force-cache":"default"});if(200!=U.status)throw new Error(U.status+" Unable to load "+U.url);const l=U.body.getReader(),t=parseInt(U.headers.get("content-length")),d=new Uint8Array(t);let n=0;for(;;){const{done:A,value:Q}=await l.read();if(A)break;d.set(Q,n),n+=Q.length,null==F||F(n/t)}const e=V.Deserialize(d),I=new Z(e);return Q.addObject(I),I}static async LoadFromFileAsync(A,Q,F){const B=new FileReader;let U=new Z;return B.onload=A=>{const F=new Uint8Array(A.target.result),B=V.Deserialize(F);U=new Z(B),Q.addObject(U)},B.onprogress=A=>{null==F||F(A.loaded/A.total)},B.readAsArrayBuffer(A),await new Promise((A=>{B.onloadend=()=>{A()}})),U}}class i{static async LoadAsync(A,Q,F,B="",U=!1){const l=await fetch(A,{mode:"cors",credentials:"omit",cache:U?"force-cache":"default"});if(200!=l.status)throw new Error(l.status+" Unable to load "+l.url);const t=l.body.getReader(),d=parseInt(l.headers.get("content-length")),n=new Uint8Array(d);let e=0;for(;;){const{done:A,value:Q}=await t.read();if(A)break;n.set(Q,e),e+=Q.length,null==F||F(e/d)}if(112!==n[0]||108!==n[1]||121!==n[2]||10!==n[3])throw new Error("Invalid PLY file");const I=new Uint8Array(this._ParsePLYBuffer(n.buffer,B)),R=V.Deserialize(I),a=new Z(R);return Q.addObject(a),a}static async LoadFromFileAsync(A,Q,F,B=""){const U=new FileReader;let l=new Z;return U.onload=A=>{const F=new Uint8Array(this._ParsePLYBuffer(A.target.result,B)),U=V.Deserialize(F);l=new Z(U),Q.addObject(l)},U.onprogress=A=>{null==F||F(A.loaded/A.total)},U.readAsArrayBuffer(A),await new Promise((A=>{U.onloadend=()=>{A()}})),l}static _ParsePLYBuffer(F,B){const U=new Uint8Array(F),l=(new TextDecoder).decode(U.slice(0,10240)),t="end_header\n",d=l.indexOf(t);if(d<0)throw new Error("Unable to read .ply file header");const n=parseInt(/element vertex (\d+)\n/.exec(l)[1]);let Z=0;const e={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},I=[];for(const A of l.slice(0,d).split("\n").filter((A=>A.startsWith("property ")))){const[Q,F,B]=A.split(" ");if(I.push({name:B,type:F,offset:Z}),!e[F])throw new Error(`Unsupported property type: ${F}`);Z+=e[F]}const R=new DataView(F,d+11),a=new ArrayBuffer(V.RowLength*n),g=Q.FromEuler(new A(Math.PI/2,0,0));for(let A=0;A<n;A++){const F=new Float32Array(a,A*V.RowLength,3),U=new Float32Array(a,A*V.RowLength+12,3),l=new Uint8ClampedArray(a,A*V.RowLength+24,4),t=new Uint8ClampedArray(a,A*V.RowLength+28,4);let d=255,n=0,e=0,i=0;I.forEach((Q=>{let B;switch(Q.type){case"float":B=R.getFloat32(Q.offset+A*Z,!0);break;case"int":B=R.getInt32(Q.offset+A*Z,!0);break;default:throw new Error(`Unsupported property type: ${Q.type}`)}switch(Q.name){case"x":F[0]=B;break;case"y":F[1]=B;break;case"z":F[2]=B;break;case"scale_0":U[0]=Math.exp(B);break;case"scale_1":U[1]=Math.exp(B);break;case"scale_2":U[2]=Math.exp(B);break;case"red":l[0]=B;break;case"green":l[1]=B;break;case"blue":l[2]=B;break;case"f_dc_0":l[0]=255*(.5+this.SH_C0*B);break;case"f_dc_1":l[1]=255*(.5+this.SH_C0*B);break;case"f_dc_2":l[2]=255*(.5+this.SH_C0*B);break;case"f_dc_3":l[3]=255*(.5+this.SH_C0*B);break;case"opacity":l[3]=1/(1+Math.exp(-B))*255;break;case"rot_0":d=B;break;case"rot_1":n=B;break;case"rot_2":e=B;break;case"rot_3":i=B}}));let c=new Q(n,e,i,d);switch(B){case"polycam":{const A=F[1];F[1]=-F[2],F[2]=A,c=g.multiply(c);break}case"":break;default:throw new Error(`Unsupported format: ${B}`)}c=c.normalize(),t[0]=128*c.w+128,t[1]=128*c.x+128,t[2]=128*c.y+128,t[3]=128*c.z+128}return a}}function c(A,Q,F){var B=void 0===Q?null:Q,U=function(A,Q){var F=atob(A);if(Q){for(var B=new Uint8Array(F.length),U=0,l=F.length;U<l;++U)B[U]=F.charCodeAt(U);return String.fromCharCode.apply(null,new Uint16Array(B.buffer))}return F}(A,void 0!==F&&F),l=U.indexOf("\n",10)+1,t=U.substring(l)+(B?"//# sourceMappingURL="+B:""),d=new Blob([t],{type:"application/javascript"});return URL.createObjectURL(d)}function W(A,Q,F){var B;return function(U){return B=B||c(A,Q,F),new Worker(B,U)}}i.SH_C0=.28209479177387814;var C=W("",null,!1);class h{constructor(A,Q){this._scene=null,this._camera=null,this._started=!1,this._initialized=!1,this._renderer=A;const F=A.gl;this._program=F.createProgram(),this._passes=Q||[];const B=F.createShader(F.VERTEX_SHADER);F.shaderSource(B,this._getVertexSource()),F.compileShader(B),F.getShaderParameter(B,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(B));const U=F.createShader(F.FRAGMENT_SHADER);F.shaderSource(U,this._getFragmentSource()),F.compileShader(U),F.getShaderParameter(U,F.COMPILE_STATUS)||console.error(F.getShaderInfoLog(U)),F.attachShader(this.program,B),F.attachShader(this.program,U),F.linkProgram(this.program),F.getProgramParameter(this.program,F.LINK_STATUS)||console.error(F.getProgramInfoLog(this.program)),this.resize=()=>{F.useProgram(this._program),this._resize()},this.initialize=()=>{console.assert(!this._initialized,"ShaderProgram already initialized"),F.useProgram(this._program),this._initialize();for(const A of this.passes)A.initialize(this);this._initialized=!0,this._started=!0},this.render=(A,Q)=>{F.useProgram(this._program),this._scene===A&&this._camera===Q||(this.dispose(),this._scene=A,this._camera=Q,this.initialize());for(const A of this.passes)A.render();this._render()},this.dispose=()=>{if(this._initialized){F.useProgram(this._program);for(const A of this.passes)A.dispose();this._dispose(),this._scene=null,this._camera=null,this._initialized=!1}}}get renderer(){return this._renderer}get scene(){return this._scene}get camera(){return this._camera}get program(){return this._program}get passes(){return this._passes}get started(){return this._started}}var s=W("",null,!1),o=function(A={}){var Q,F,B=A;B.ready=new Promise(((A,B)=>{Q=A,F=B}));var U,l=Object.assign({},B),t="";t=0!==(t=self.location.href).indexOf("blob:")?t.substr(0,t.replace(/[?#].*/,"").lastIndexOf("/")+1):"",U=A=>{var Q=new XMLHttpRequest;return Q.open("GET",A,!1),Q.responseType="arraybuffer",Q.send(null),new Uint8Array(Q.response)},B.print||console.log.bind(console);var d,n,V=B.printErr||console.error.bind(console);function Z(A){if(X(A))return function(A){for(var Q=atob(A),F=new Uint8Array(Q.length),B=0;B<Q.length;++B)F[B]=Q.charCodeAt(B);return F}(A.slice(G.length))}Object.assign(B,l),l=null,B.arguments&&B.arguments,B.thisProgram&&B.thisProgram,B.quit&&B.quit,B.wasmBinary&&(d=B.wasmBinary),"object"!=typeof WebAssembly&&E("no native wasm support detected");var e,I,R,a,g,i,c,W,C=!1;function h(){var A=n.buffer;B.HEAP8=e=new Int8Array(A),B.HEAP16=R=new Int16Array(A),B.HEAPU8=I=new Uint8Array(A),B.HEAPU16=a=new Uint16Array(A),B.HEAP32=g=new Int32Array(A),B.HEAPU32=i=new Uint32Array(A),B.HEAPF32=c=new Float32Array(A),B.HEAPF64=W=new Float64Array(A)}var s=[],o=[],J=[],b=0,r=null;function E(A){B.onAbort?.(A),V(A="Aborted("+A+")"),C=!0,A+=". Build with -sASSERTIONS for more info.";var Q=new WebAssembly.RuntimeError(A);throw F(Q),Q}var m,N,G="data:application/octet-stream;base64,",X=A=>A.startsWith(G);function Y(A){return Promise.resolve().then((()=>function(A){if(A==m&&d)return new Uint8Array(d);var Q=Z(A);if(Q)return Q;if(U)return U(A);throw"both async and sync fetching of the wasm failed"}(A)))}function y(A,Q,F,B){return function(A,Q,F){return Y(A).then((A=>WebAssembly.instantiate(A,Q))).then((A=>A)).then(F,(A=>{V(`failed to asynchronously prepare wasm: ${A}`),E(A)}))}(Q,F,B)}X(m="data:application/octet-stream;base64,")||(N=m,m=B.locateFile?B.locateFile(N,t):t+N);var p=A=>{for(;A.length>0;)A.shift()(B)};B.noExitRuntime;var S,k,u=A=>{for(var Q="",F=A;I[F];)Q+=S[I[F++]];return Q},T={},D={},H=A=>{throw new k(A)};function w(A,Q,F={}){if(!("argPackAdvance"in Q))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(A,Q,F={}){var B=Q.name;if(A||H(`type "${B}" must have a positive integer typeid pointer`),D.hasOwnProperty(A)){if(F.ignoreDuplicateRegistrations)return;H(`Cannot register type '${B}' twice`)}if(D[A]=Q,T.hasOwnProperty(A)){var U=T[A];delete T[A],U.forEach((A=>A()))}}(A,Q,F)}function x(){this.allocated=[void 0],this.freelist=[]}var f=new x,M=()=>{for(var A=0,Q=f.reserved;Q<f.allocated.length;++Q)void 0!==f.allocated[Q]&&++A;return A},z=A=>(A||H("Cannot use deleted val. handle = "+A),f.get(A).value),v=A=>{switch(A){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return f.allocate({refcount:1,value:A})}};function K(A){return this.fromWireType(g[A>>2])}var j=(A,Q)=>{switch(Q){case 4:return function(A){return this.fromWireType(c[A>>2])};case 8:return function(A){return this.fromWireType(W[A>>3])};default:throw new TypeError(`invalid float width (${Q}): ${A}`)}},O=(A,Q,F)=>{switch(Q){case 1:return F?A=>e[A>>0]:A=>I[A>>0];case 2:return F?A=>R[A>>1]:A=>a[A>>1];case 4:return F?A=>g[A>>2]:A=>i[A>>2];default:throw new TypeError(`invalid integer width (${Q}): ${A}`)}};function L(A){return this.fromWireType(i[A>>2])}var P="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,_=(A,Q)=>A?((A,Q,F)=>{for(var B=Q+F,U=Q;A[U]&&!(U>=B);)++U;if(U-Q>16&&A.buffer&&P)return P.decode(A.subarray(Q,U));for(var l="";Q<U;){var t=A[Q++];if(128&t){var d=63&A[Q++];if(192!=(224&t)){var n=63&A[Q++];if((t=224==(240&t)?(15&t)<<12|d<<6|n:(7&t)<<18|d<<12|n<<6|63&A[Q++])<65536)l+=String.fromCharCode(t);else{var V=t-65536;l+=String.fromCharCode(55296|V>>10,56320|1023&V)}}else l+=String.fromCharCode((31&t)<<6|d)}else l+=String.fromCharCode(t)}return l})(I,A,Q):"",q="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,$=(A,Q)=>{for(var F=A,B=F>>1,U=B+Q/2;!(B>=U)&&a[B];)++B;if((F=B<<1)-A>32&&q)return q.decode(I.subarray(A,F));for(var l="",t=0;!(t>=Q/2);++t){var d=R[A+2*t>>1];if(0==d)break;l+=String.fromCharCode(d)}return l},AA=(A,Q,F)=>{if(F??=2147483647,F<2)return 0;for(var B=Q,U=(F-=2)<2*A.length?F/2:A.length,l=0;l<U;++l){var t=A.charCodeAt(l);R[Q>>1]=t,Q+=2}return R[Q>>1]=0,Q-B},QA=A=>2*A.length,FA=(A,Q)=>{for(var F=0,B="";!(F>=Q/4);){var U=g[A+4*F>>2];if(0==U)break;if(++F,U>=65536){var l=U-65536;B+=String.fromCharCode(55296|l>>10,56320|1023&l)}else B+=String.fromCharCode(U)}return B},BA=(A,Q,F)=>{if(F??=2147483647,F<4)return 0;for(var B=Q,U=B+F-4,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),g[Q>>2]=t,(Q+=4)+4>U)break}return g[Q>>2]=0,Q-B},UA=A=>{for(var Q=0,F=0;F<A.length;++F){var B=A.charCodeAt(F);B>=55296&&B<=57343&&++F,Q+=4}return Q},lA=A=>{var Q=(A-n.buffer.byteLength+65535)/65536;try{return n.grow(Q),h(),1}catch(A){}};(()=>{for(var A=new Array(256),Q=0;Q<256;++Q)A[Q]=String.fromCharCode(Q);S=A})(),k=B.BindingError=class extends Error{constructor(A){super(A),this.name="BindingError"}},B.InternalError=class extends Error{constructor(A){super(A),this.name="InternalError"}},Object.assign(x.prototype,{get(A){return this.allocated[A]},has(A){return void 0!==this.allocated[A]},allocate(A){var Q=this.freelist.pop()||this.allocated.length;return this.allocated[Q]=A,Q},free(A){this.allocated[A]=void 0,this.freelist.push(A)}}),f.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),f.reserved=f.allocated.length,B.count_emval_handles=M;var tA={f:(A,Q,F,B,U)=>{},i:(A,Q,F,B)=>{w(A,{name:Q=u(Q),fromWireType:function(A){return!!A},toWireType:function(A,Q){return Q?F:B},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(I[A])},destructorFunction:null})},h:(A,Q)=>{w(A,{name:Q=u(Q),fromWireType:A=>{var Q=z(A);return(A=>{A>=f.reserved&&0==--f.get(A).refcount&&f.free(A)})(A),Q},toWireType:(A,Q)=>v(Q),argPackAdvance:8,readValueFromPointer:K,destructorFunction:null})},e:(A,Q,F)=>{w(A,{name:Q=u(Q),fromWireType:A=>A,toWireType:(A,Q)=>Q,argPackAdvance:8,readValueFromPointer:j(Q,F),destructorFunction:null})},b:(A,Q,F,B,U)=>{Q=u(Q);var l=A=>A;if(0===B){var t=32-8*F;l=A=>A<<t>>>t}var d=Q.includes("unsigned");w(A,{name:Q,fromWireType:l,toWireType:d?function(A,Q){return this.name,Q>>>0}:function(A,Q){return this.name,Q},argPackAdvance:8,readValueFromPointer:O(Q,F,0!==B),destructorFunction:null})},a:(A,Q,F)=>{var B=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][Q];function U(A){var Q=i[A>>2],F=i[A+4>>2];return new B(e.buffer,F,Q)}w(A,{name:F=u(F),fromWireType:U,argPackAdvance:8,readValueFromPointer:U},{ignoreDuplicateRegistrations:!0})},d:(A,Q)=>{var F="std::string"===(Q=u(Q));w(A,{name:Q,fromWireType(A){var Q,B=i[A>>2],U=A+4;if(F)for(var l=U,t=0;t<=B;++t){var d=U+t;if(t==B||0==I[d]){var n=_(l,d-l);void 0===Q?Q=n:(Q+=String.fromCharCode(0),Q+=n),l=d+1}}else{var V=new Array(B);for(t=0;t<B;++t)V[t]=String.fromCharCode(I[U+t]);Q=V.join("")}return ZA(A),Q},toWireType(A,Q){var B;Q instanceof ArrayBuffer&&(Q=new Uint8Array(Q));var U="string"==typeof Q;U||Q instanceof Uint8Array||Q instanceof Uint8ClampedArray||Q instanceof Int8Array||H("Cannot pass non-string to std::string"),B=F&&U?(A=>{for(var Q=0,F=0;F<A.length;++F){var B=A.charCodeAt(F);B<=127?Q++:B<=2047?Q+=2:B>=55296&&B<=57343?(Q+=4,++F):Q+=3}return Q})(Q):Q.length;var l=VA(4+B+1),t=l+4;if(i[l>>2]=B,F&&U)((A,Q,F,B)=>{if(!(B>0))return 0;for(var U=F+B-1,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),t<=127){if(F>=U)break;Q[F++]=t}else if(t<=2047){if(F+1>=U)break;Q[F++]=192|t>>6,Q[F++]=128|63&t}else if(t<=65535){if(F+2>=U)break;Q[F++]=224|t>>12,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}else{if(F+3>=U)break;Q[F++]=240|t>>18,Q[F++]=128|t>>12&63,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}}Q[F]=0})(Q,I,t,B+1);else if(U)for(var d=0;d<B;++d){var n=Q.charCodeAt(d);n>255&&(ZA(t),H("String has UTF-16 code units that do not fit in 8 bits")),I[t+d]=n}else for(d=0;d<B;++d)I[t+d]=Q[d];return null!==A&&A.push(ZA,l),l},argPackAdvance:8,readValueFromPointer:L,destructorFunction(A){ZA(A)}})},c:(A,Q,F)=>{var B,U,l,t,d;F=u(F),2===Q?(B=$,U=AA,t=QA,l=()=>a,d=1):4===Q&&(B=FA,U=BA,t=UA,l=()=>i,d=2),w(A,{name:F,fromWireType:A=>{for(var F,U=i[A>>2],t=l(),n=A+4,V=0;V<=U;++V){var Z=A+4+V*Q;if(V==U||0==t[Z>>d]){var e=B(n,Z-n);void 0===F?F=e:(F+=String.fromCharCode(0),F+=e),n=Z+Q}}return ZA(A),F},toWireType:(A,B)=>{"string"!=typeof B&&H(`Cannot pass non-string to C++ string type ${F}`);var l=t(B),n=VA(4+l+Q);return i[n>>2]=l>>d,U(B,n+4,l+Q),null!==A&&A.push(ZA,n),n},argPackAdvance:8,readValueFromPointer:K,destructorFunction(A){ZA(A)}})},j:(A,Q)=>{w(A,{isVoid:!0,name:Q=u(Q),argPackAdvance:0,fromWireType:()=>{},toWireType:(A,Q)=>{}})},g:A=>{var Q=I.length,F=2147483648;if((A>>>=0)>F)return!1;for(var B,U,l=1;l<=4;l*=2){var t=Q*(1+.2/l);t=Math.min(t,A+100663296);var d=Math.min(F,(B=Math.max(A,t))+((U=65536)-B%U)%U);if(lA(d))return!0}return!1}},dA=function(){var A={a:tA};function Q(A,Q){var F;return dA=A.exports,n=dA.k,h(),F=dA.l,o.unshift(F),function(A){if(b--,B.monitorRunDependencies?.(b),0==b&&r){var Q=r;r=null,Q()}}(),dA}if(b++,B.monitorRunDependencies?.(b),B.instantiateWasm)try{return B.instantiateWasm(A,Q)}catch(A){V(`Module.instantiateWasm callback failed with error: ${A}`),F(A)}return y(0,m,A,(function(A){Q(A.instance)})).catch(F),{}}();B._pack=(A,Q,F,U,l,t,d,n,V,Z,e)=>(B._pack=dA.m)(A,Q,F,U,l,t,d,n,V,Z,e);var nA,VA=B._malloc=A=>(VA=B._malloc=dA.o)(A),ZA=B._free=A=>(ZA=B._free=dA.p)(A);function eA(){function A(){nA||(nA=!0,B.calledRun=!0,C||(p(o),Q(B),B.onRuntimeInitialized&&B.onRuntimeInitialized(),function(){if(B.postRun)for("function"==typeof B.postRun&&(B.postRun=[B.postRun]);B.postRun.length;)A=B.postRun.shift(),J.unshift(A);var A;p(J)}()))}b>0||(function(){if(B.preRun)for("function"==typeof B.preRun&&(B.preRun=[B.preRun]);B.preRun.length;)A=B.preRun.shift(),s.unshift(A);var A;p(s)}(),b>0||(B.setStatus?(B.setStatus("Running..."),setTimeout((function(){setTimeout((function(){B.setStatus("")}),1),A()}),1)):A()))}if(r=function A(){nA||eA(),nA||(r=A)},B.preInit)for("function"==typeof B.preInit&&(B.preInit=[B.preInit]);B.preInit.length>0;)B.preInit.pop()();return eA(),A.ready};class J{constructor(A){this.dataChanged=!1,this.transformsChanged=!1,this._updating=new Set,this._dirty=new Set;let Q=0,F=0;this._splatIndices=new Map,this._offsets=new Map;const B=new Map;for(const U of A.objects)U instanceof Z&&(this._splatIndices.set(U,F),this._offsets.set(U,Q),B.set(Q,U),Q+=U.data.vertexCount,F++);this._vertexCount=Q,this._width=2048,this._height=Math.ceil(2*this.vertexCount/this.width),this._data=new Uint32Array(this.width*this.height*4),this._transformsWidth=5,this._transformsHeight=B.size,this._transforms=new Float32Array(this._transformsWidth*this._transformsHeight*4),this._transformIndicesWidth=1024,this._transformIndicesHeight=Math.ceil(this.vertexCount/this._transformIndicesWidth),this._transformIndices=new Uint32Array(this._transformIndicesWidth*this._transformIndicesHeight),this._positions=new Float32Array(3*this.vertexCount),this._rotations=new Float32Array(4*this.vertexCount),this._scales=new Float32Array(3*this.vertexCount),this._worker=new s;const U=A=>{const Q=this._splatIndices.get(A);this._transforms.set(A.transform.buffer,20*Q),this._transforms[20*Q+16]=A.selected?1:0,A.positionChanged=!1,A.rotationChanged=!1,A.scaleChanged=!1,A.selectedChanged=!1,this.transformsChanged=!0};let l;this._worker.onmessage=A=>{if(A.data.response){const Q=A.data.response,F=B.get(Q.offset);U(F);const l=this._splatIndices.get(F);for(let A=0;A<F.data.vertexCount;A++)this._transformIndices[Q.offset+A]=l;this._data.set(Q.data,8*Q.offset),F.data.reattach(Q.positions,Q.rotations,Q.scales,Q.colors,Q.selection),this._positions.set(Q.worldPositions,3*Q.offset),this._rotations.set(Q.worldRotations,4*Q.offset),this._scales.set(Q.worldScales,3*Q.offset),this._updating.delete(F),F.selectedChanged=!1,this.dataChanged=!0}},async function(){l=await o()}();const t=A=>{if(!l)return void async function(){for(;!l;)await new Promise((A=>setTimeout(A,0)))}().then((()=>{t(A)}));U(A);const Q=l._malloc(3*A.data.vertexCount*4),F=l._malloc(4*A.data.vertexCount*4),B=l._malloc(3*A.data.vertexCount*4),d=l._malloc(4*A.data.vertexCount),n=l._malloc(A.data.vertexCount),V=l._malloc(8*A.data.vertexCount*4),Z=l._malloc(3*A.data.vertexCount*4),e=l._malloc(4*A.data.vertexCount*4),I=l._malloc(3*A.data.vertexCount*4);l.HEAPF32.set(A.data.positions,Q/4),l.HEAPF32.set(A.data.rotations,F/4),l.HEAPF32.set(A.data.scales,B/4),l.HEAPU8.set(A.data.colors,d),l.HEAPU8.set(A.data.selection,n),l._pack(A.selected,A.data.vertexCount,Q,F,B,d,n,V,Z,e,I);const R=new Uint32Array(l.HEAPU32.buffer,V,8*A.data.vertexCount),a=new Float32Array(l.HEAPF32.buffer,Z,3*A.data.vertexCount),g=new Float32Array(l.HEAPF32.buffer,e,4*A.data.vertexCount),i=new Float32Array(l.HEAPF32.buffer,I,3*A.data.vertexCount),c=this._splatIndices.get(A),W=this._offsets.get(A);for(let Q=0;Q<A.data.vertexCount;Q++)this._transformIndices[W+Q]=c;this._data.set(R,8*W),this._positions.set(a,3*W),this._rotations.set(g,4*W),this._scales.set(i,3*W),l._free(Q),l._free(F),l._free(B),l._free(d),l._free(n),l._free(V),l._free(Z),l._free(e),l._free(I),this.dataChanged=!0},d=A=>{if((A.positionChanged||A.rotationChanged||A.scaleChanged||A.selectedChanged)&&U(A),!A.data.changed||A.data.detached)return;const Q={position:new Float32Array(A.position.flat()),rotation:new Float32Array(A.rotation.flat()),scale:new Float32Array(A.scale.flat()),selected:A.selected,vertexCount:A.data.vertexCount,positions:A.data.positions,rotations:A.data.rotations,scales:A.data.scales,colors:A.data.colors,selection:A.data.selection,offset:this._offsets.get(A)};this._worker.postMessage({splat:Q},[Q.position.buffer,Q.rotation.buffer,Q.scale.buffer,Q.positions.buffer,Q.rotations.buffer,Q.scales.buffer,Q.colors.buffer,Q.selection.buffer]),this._updating.add(A),A.data.detached=!0};this.getSplat=A=>{let Q=null;for(const[F,B]of this._offsets){if(!(A>=B))break;Q=F}return Q},this.getLocalIndex=(A,Q)=>Q-this._offsets.get(A),this.markDirty=A=>{this._dirty.add(A)},this.rebuild=()=>{for(const A of this._dirty)d(A);this._dirty.clear()},this.dispose=()=>{this._worker.terminate()};for(const A of this._splatIndices.keys())t(A)}get offsets(){return this._offsets}get data(){return this._data}get width(){return this._width}get height(){return this._height}get transforms(){return this._transforms}get transformsWidth(){return this._transformsWidth}get transformsHeight(){return this._transformsHeight}get transformIndices(){return this._transformIndices}get transformIndicesWidth(){return this._transformIndicesWidth}get transformIndicesHeight(){return this._transformIndicesHeight}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}get vertexCount(){return this._vertexCount}get needsRebuild(){return this._dirty.size>0}get updating(){return this._updating.size>0}}class b{constructor(A=0,Q=0,F=0,B=255){this.r=A,this.g=Q,this.b=F,this.a=B}flat(){return[this.r,this.g,this.b,this.a]}flatNorm(){return[this.r/255,this.g/255,this.b/255,this.a/255]}toHexString(){return"#"+this.flat().map((A=>A.toString(16).padStart(2,"0"))).join("")}toString(){return`[${this.flat().join(", ")}]`}}class r extends h{constructor(A,Q){super(A,Q),this._outlineThickness=10,this._outlineColor=new b(255,165,0,255),this._renderData=null,this._depthIndex=null,this._chunks=null,this._splatTexture=null;const F=A.canvas,B=A.gl;let U,l,t,d,n,V,e,I,R,a,g,i,c,W,h,s;this._resize=()=>{this._camera&&(this._camera.data.setSize(F.width,F.height),this._camera.update(),l=B.getUniformLocation(this.program,"projection"),B.uniformMatrix4fv(l,!1,this._camera.data.projectionMatrix.buffer),t=B.getUniformLocation(this.program,"viewport"),B.uniform2fv(t,new Float32Array([F.width,F.height])))};const o=()=>{U=new C,U.onmessage=A=>{if(A.data.depthIndex){const{depthIndex:Q,chunks:F}=A.data;this._depthIndex=Q,this._chunks=F,B.bindBuffer(B.ARRAY_BUFFER,s),B.bufferData(B.ARRAY_BUFFER,Q,B.STATIC_DRAW)}}};this._initialize=()=>{if(this._scene&&this._camera){this._resize(),this._scene.addEventListener("objectAdded",r),this._scene.addEventListener("objectRemoved",E);for(const A of this._scene.objects)A instanceof Z&&A.addEventListener("objectChanged",m);this._renderData=new J(this._scene),d=B.getUniformLocation(this.program,"focal"),B.uniform2fv(d,new Float32Array([this._camera.data.fx,this._camera.data.fy])),n=B.getUniformLocation(this.program,"view"),B.uniformMatrix4fv(n,!1,this._camera.data.viewMatrix.buffer),R=B.getUniformLocation(this.program,"outlineThickness"),B.uniform1f(R,this.outlineThickness),a=B.getUniformLocation(this.program,"outlineColor"),B.uniform4fv(a,new Float32Array(this.outlineColor.flatNorm())),this._splatTexture=B.createTexture(),V=B.getUniformLocation(this.program,"u_texture"),B.uniform1i(V,0),c=B.createTexture(),e=B.getUniformLocation(this.program,"u_transforms"),B.uniform1i(e,1),W=B.createTexture(),I=B.getUniformLocation(this.program,"u_transformIndices"),B.uniform1i(I,2),h=B.createBuffer(),B.bindBuffer(B.ARRAY_BUFFER,h),B.bufferData(B.ARRAY_BUFFER,new Float32Array([-2,-2,2,-2,2,2,-2,2]),B.STATIC_DRAW),g=B.getAttribLocation(this.program,"position"),B.enableVertexAttribArray(g),B.vertexAttribPointer(g,2,B.FLOAT,!1,0,0),s=B.createBuffer(),i=B.getAttribLocation(this.program,"index"),B.enableVertexAttribArray(i),B.bindBuffer(B.ARRAY_BUFFER,s),o()}else console.error("Cannot render without scene and camera")};const r=A=>{const Q=A;Q.object instanceof Z&&Q.object.addEventListener("objectChanged",m),this.dispose()},E=A=>{const Q=A;Q.object instanceof Z&&Q.object.removeEventListener("objectChanged",m),this.dispose()},m=A=>{const Q=A;Q.object instanceof Z&&this._renderData&&this._renderData.markDirty(Q.object)};this._render=()=>{if(this._scene&&this._camera&&this.renderData){if(this._camera.update(),U.postMessage({viewProj:this._camera.data.viewProj}),this.renderData.needsRebuild&&this.renderData.rebuild(),this.renderData.dataChanged||this.renderData.transformsChanged){this.renderData.dataChanged&&(B.activeTexture(B.TEXTURE0),B.bindTexture(B.TEXTURE_2D,this.splatTexture),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_S,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_T,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MIN_FILTER,B.NEAREST),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MAG_FILTER,B.NEAREST),B.texImage2D(B.TEXTURE_2D,0,B.RGBA32UI,this.renderData.width,this.renderData.height,0,B.RGBA_INTEGER,B.UNSIGNED_INT,this.renderData.data)),this.renderData.transformsChanged&&(B.activeTexture(B.TEXTURE1),B.bindTexture(B.TEXTURE_2D,c),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_S,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_T,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MIN_FILTER,B.NEAREST),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MAG_FILTER,B.NEAREST),B.texImage2D(B.TEXTURE_2D,0,B.RGBA32F,this.renderData.transformsWidth,this.renderData.transformsHeight,0,B.RGBA,B.FLOAT,this.renderData.transforms),B.activeTexture(B.TEXTURE2),B.bindTexture(B.TEXTURE_2D,W),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_S,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_WRAP_T,B.CLAMP_TO_EDGE),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MIN_FILTER,B.NEAREST),B.texParameteri(B.TEXTURE_2D,B.TEXTURE_MAG_FILTER,B.NEAREST),B.texImage2D(B.TEXTURE_2D,0,B.R32UI,this.renderData.transformIndicesWidth,this.renderData.transformIndicesHeight,0,B.RED_INTEGER,B.UNSIGNED_INT,this.renderData.transformIndices));const A=new Float32Array(this.renderData.positions.slice().buffer),Q=new Float32Array(this.renderData.transforms.slice().buffer),F=new Uint32Array(this.renderData.transformIndices.slice().buffer);U.postMessage({sortData:{positions:A,transforms:Q,transformIndices:F,vertexCount:this.renderData.vertexCount}},[A.buffer,Q.buffer,F.buffer]),this.renderData.dataChanged=!1,this.renderData.transformsChanged=!1}B.viewport(0,0,F.width,F.height),B.clearColor(0,0,0,0),B.clear(B.COLOR_BUFFER_BIT),B.disable(B.DEPTH_TEST),B.enable(B.BLEND),B.blendFuncSeparate(B.ONE_MINUS_DST_ALPHA,B.ONE,B.ONE_MINUS_DST_ALPHA,B.ONE),B.blendEquationSeparate(B.FUNC_ADD,B.FUNC_ADD),B.uniformMatrix4fv(l,!1,this._camera.data.projectionMatrix.buffer),B.uniformMatrix4fv(n,!1,this._camera.data.viewMatrix.buffer),B.bindBuffer(B.ARRAY_BUFFER,h),B.vertexAttribPointer(g,2,B.FLOAT,!1,0,0),B.bindBuffer(B.ARRAY_BUFFER,s),B.vertexAttribIPointer(i,1,B.INT,0,0),B.vertexAttribDivisor(i,1),B.drawArraysInstanced(B.TRIANGLE_FAN,0,4,this.renderData.vertexCount)}else console.error("Cannot render without scene and camera")},this._dispose=()=>{if(this._scene&&this._camera&&this.renderData){this._scene.removeEventListener("objectAdded",r),this._scene.removeEventListener("objectRemoved",E);for(const A of this._scene.objects)A instanceof Z&&A.removeEventListener("objectChanged",m);U.terminate(),this.renderData.dispose(),B.deleteTexture(this.splatTexture),B.deleteTexture(c),B.deleteTexture(W),B.deleteBuffer(s),B.deleteBuffer(h)}else console.error("Cannot dispose without scene and camera")},this._setOutlineThickness=A=>{this._outlineThickness=A,this._initialized&&B.uniform1f(R,A)},this._setOutlineColor=A=>{this._outlineColor=A,this._initialized&&B.uniform4fv(a,new Float32Array(A.flatNorm()))}}get renderData(){return this._renderData}get depthIndex(){return this._depthIndex}get chunks(){return this._chunks}get splatTexture(){return this._splatTexture}get outlineThickness(){return this._outlineThickness}set outlineThickness(A){this._setOutlineThickness(A)}get outlineColor(){return this._outlineColor}set outlineColor(A){this._setOutlineColor(A)}_getVertexSource(){return"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform highp sampler2D u_transforms;\nuniform highp usampler2D u_transformIndices;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool useDepthFade;\nuniform float depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\nout float vSize;\nout float vSelected;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    float selected = float((cen.w >> 24) & 0xffu);\n\n    uint transformIndex = texelFetch(u_transformIndices, ivec2(uint(index) & 0x3ffu, uint(index) >> 10), 0).x;\n    mat4 transform = mat4(\n        texelFetch(u_transforms, ivec2(0, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(1, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(2, transformIndex), 0),\n        texelFetch(u_transforms, ivec2(3, transformIndex), 0)\n    );\n\n    if (selected < 0.5) {\n        selected = texelFetch(u_transforms, ivec2(4, transformIndex), 0).x;\n    }\n\n    mat4 viewTransform = view * transform;\n\n    vec4 cam = viewTransform * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(viewTransform)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if (lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n    vSize = length(majorAxis);\n    vSelected = selected;\n\n    float scalingFactor = 1.0;\n\n    if (useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport\n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n}\n"}_getFragmentSource(){return"#version 300 es\nprecision highp float;\n\nuniform float outlineThickness;\nuniform vec4 outlineColor;\n\nin vec4 vColor;\nin vec2 vPosition;\nin float vSize;\nin float vSelected;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n\n    if (A < -4.0) discard;\n\n    if (vSelected < 0.5) {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n        return;\n    }\n\n    float outlineThreshold = -4.0 + (outlineThickness / vSize);\n\n    if (A < outlineThreshold) {\n        fragColor = outlineColor;\n    } \n    else {\n        float B = exp(A) * vColor.a;\n        fragColor = vec4(B * vColor.rgb, B);\n    }\n}\n"}}class E{constructor(A=1){let Q,F,B,U,l=0,t=!1;this.initialize=A=>{if(!(A instanceof r))throw new Error("FadeInPass requires a RenderProgram");l=A.started?1:0,t=!0,Q=A,F=A.renderer.gl,B=F.getUniformLocation(Q.program,"useDepthFade"),F.uniform1i(B,1),U=F.getUniformLocation(Q.program,"depthFade"),F.uniform1f(U,l)},this.render=()=>{var d;t&&!(null===(d=Q.renderData)||void 0===d?void 0:d.updating)&&(F.useProgram(Q.program),l=Math.min(l+.01*A,1),l>=1&&(t=!1,F.uniform1i(B,0)),F.uniform1f(U,l))}}dispose(){}}class m{constructor(A=null,Q=null){this._backgroundColor=new b;const F=A||document.createElement("canvas");A||(F.style.display="block",F.style.boxSizing="border-box",F.style.width="100%",F.style.height="100%",F.style.margin="0",F.style.padding="0",document.body.appendChild(F)),F.style.background=this._backgroundColor.toHexString(),this._canvas=F,this._gl=F.getContext("webgl2",{antialias:!1});const B=Q||[];Q||B.push(new E),this._renderProgram=new r(this,B);const U=[this._renderProgram];this.resize=()=>{const A=F.clientWidth,Q=F.clientHeight;F.width===A&&F.height===Q||this.setSize(A,Q)},this.setSize=(A,Q)=>{F.width=A,F.height=Q,this._gl.viewport(0,0,F.width,F.height);for(const A of U)A.resize()},this.render=(A,Q)=>{for(const F of U)F.render(A,Q)},this.dispose=()=>{for(const A of U)A.dispose()},this.addProgram=A=>{U.push(A)},this.removeProgram=A=>{const Q=U.indexOf(A);if(Q<0)throw new Error("Program not found");U.splice(Q,1)},this.resize()}get canvas(){return this._canvas}get gl(){return this._gl}get renderProgram(){return this._renderProgram}get backgroundColor(){return this._backgroundColor}set backgroundColor(A){this._backgroundColor=A,this._canvas.style.background=A.toHexString()}}class N{constructor(F,B,U=.5,l=.5,t=5,d=!0,V=new A){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{};let Z=V.clone(),e=Z.clone(),I=U,R=l,a=t,g=!1,i=!1,c=0,W=0,C=0;const h={};let s=!1;F.addEventListener("objectChanged",(()=>{if(s)return;const Q=F.rotation.toEuler();I=-Q.y,R=-Q.x;const B=F.position.x-a*Math.sin(I)*Math.cos(R),U=F.position.y+a*Math.sin(R),l=F.position.z+a*Math.cos(I)*Math.cos(R);e=new A(B,U,l)})),this.setCameraTarget=Q=>{const B=Q.x-F.position.x,U=Q.y-F.position.y,l=Q.z-F.position.z;a=Math.sqrt(B*B+U*U+l*l),R=Math.atan2(U,Math.sqrt(B*B+l*l)),I=-Math.atan2(B,l),e=new A(Q.x,Q.y,Q.z)};const o=()=>.1+.9*(a-this.minZoom)/(this.maxZoom-this.minZoom),J=A=>{h[A.code]=!0,"ArrowUp"===A.code&&(h.KeyW=!0),"ArrowDown"===A.code&&(h.KeyS=!0),"ArrowLeft"===A.code&&(h.KeyA=!0),"ArrowRight"===A.code&&(h.KeyD=!0)},b=A=>{h[A.code]=!1,"ArrowUp"===A.code&&(h.KeyW=!1),"ArrowDown"===A.code&&(h.KeyS=!1),"ArrowLeft"===A.code&&(h.KeyA=!1),"ArrowRight"===A.code&&(h.KeyD=!1)},r=A=>{p(A),g=!0,i=2===A.button,W=A.clientX,C=A.clientY,window.addEventListener("mouseup",E)},E=A=>{p(A),g=!1,i=!1,window.removeEventListener("mouseup",E)},m=Q=>{if(p(Q),!g||!F)return;const B=Q.clientX-W,U=Q.clientY-C;if(i){const Q=o(),l=-B*this.panSpeed*.01*Q,t=-U*this.panSpeed*.01*Q,d=n.RotationFromQuaternion(F.rotation).buffer,V=new A(d[0],d[3],d[6]),Z=new A(d[1],d[4],d[7]);e=e.add(V.multiply(l)),e=e.add(Z.multiply(t))}else I-=B*this.orbitSpeed*.003,R+=U*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);W=Q.clientX,C=Q.clientY},N=A=>{p(A);const Q=o();a+=A.deltaY*this.zoomSpeed*.025*Q,a=Math.min(Math.max(a,this.minZoom),this.maxZoom)},G=A=>{if(p(A),1===A.touches.length)g=!0,i=!1,W=A.touches[0].clientX,C=A.touches[0].clientY,c=0;else if(2===A.touches.length){g=!0,i=!0,W=(A.touches[0].clientX+A.touches[1].clientX)/2,C=(A.touches[0].clientY+A.touches[1].clientY)/2;const Q=A.touches[0].clientX-A.touches[1].clientX,F=A.touches[0].clientY-A.touches[1].clientY;c=Math.sqrt(Q*Q+F*F)}},X=A=>{p(A),g=!1,i=!1},Y=Q=>{if(p(Q),g&&F)if(i){const B=o(),U=Q.touches[0].clientX-Q.touches[1].clientX,l=Q.touches[0].clientY-Q.touches[1].clientY,t=Math.sqrt(U*U+l*l);a+=(c-t)*this.zoomSpeed*.1*B,a=Math.min(Math.max(a,this.minZoom),this.maxZoom),c=t;const d=(Q.touches[0].clientX+Q.touches[1].clientX)/2,V=(Q.touches[0].clientY+Q.touches[1].clientY)/2,Z=d-W,I=V-C,R=n.RotationFromQuaternion(F.rotation).buffer,g=new A(R[0],R[3],R[6]),i=new A(R[1],R[4],R[7]);e=e.add(g.multiply(-Z*this.panSpeed*.025*B)),e=e.add(i.multiply(-I*this.panSpeed*.025*B)),W=d,C=V}else{const A=Q.touches[0].clientX-W,F=Q.touches[0].clientY-C;I-=A*this.orbitSpeed*.003,R+=F*this.orbitSpeed*.003,R=Math.min(Math.max(R,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),W=Q.touches[0].clientX,C=Q.touches[0].clientY}},y=(A,Q,F)=>(1-F)*A+F*Q;this.update=()=>{s=!0,U=y(U,I,this.dampening),l=y(l,R,this.dampening),t=y(t,a,this.dampening),Z=Z.lerp(e,this.dampening);const B=Z.x+t*Math.sin(U)*Math.cos(l),d=Z.y-t*Math.sin(l),V=Z.z-t*Math.cos(U)*Math.cos(l);F.position=new A(B,d,V);const g=Z.subtract(F.position).normalize(),i=Math.asin(-g.y),c=Math.atan2(g.x,g.z);F.rotation=Q.FromEuler(new A(i,c,0));const W=.025,C=.01,o=n.RotationFromQuaternion(F.rotation).buffer,J=new A(-o[2],-o[5],-o[8]),b=new A(o[0],o[3],o[6]);h.KeyS&&(e=e.add(J.multiply(W))),h.KeyW&&(e=e.subtract(J.multiply(W))),h.KeyA&&(e=e.subtract(b.multiply(W))),h.KeyD&&(e=e.add(b.multiply(W))),h.KeyE&&(I+=C),h.KeyQ&&(I-=C),h.KeyR&&(R+=C),h.KeyF&&(R-=C),s=!1};const p=A=>{A.preventDefault(),A.stopPropagation()};this.dispose=()=>{B.removeEventListener("dragenter",p),B.removeEventListener("dragover",p),B.removeEventListener("dragleave",p),B.removeEventListener("contextmenu",p),B.removeEventListener("mousedown",r),B.removeEventListener("mousemove",m),B.removeEventListener("wheel",N),B.removeEventListener("touchstart",G),B.removeEventListener("touchend",X),B.removeEventListener("touchmove",Y),d&&(window.removeEventListener("keydown",J),window.removeEventListener("keyup",b))},d&&(window.addEventListener("keydown",J),window.addEventListener("keyup",b)),B.addEventListener("dragenter",p),B.addEventListener("dragover",p),B.addEventListener("dragleave",p),B.addEventListener("contextmenu",p),B.addEventListener("mousedown",r),B.addEventListener("mousemove",m),B.addEventListener("wheel",N),B.addEventListener("touchstart",G),B.addEventListener("touchend",X),B.addEventListener("touchmove",Y),this.update()}}class G{constructor(A,Q){this.normal=A,this.point=Q}intersect(A,Q){const F=this.normal.dot(Q);if(Math.abs(F)<1e-4)return null;const B=this.normal.dot(this.point.subtract(A))/F;return B<0?null:A.add(Q.multiply(B))}}class X{initialize(A){}render(){}dispose(){}}var Y=function(A={}){var Q,F,B=A;B.ready=new Promise(((A,B)=>{Q=A,F=B}));var U=Object.assign({},B),l="";"undefined"!=typeof document&&document.currentScript&&(l=document.currentScript.src),l=0!==l.indexOf("blob:")?l.substr(0,l.replace(/[?#].*/,"").lastIndexOf("/")+1):"",B.print||console.log.bind(console);var t,d,n=B.printErr||console.error.bind(console);function V(A){if(G(A))return function(A){for(var Q=atob(A),F=new Uint8Array(Q.length),B=0;B<Q.length;++B)F[B]=Q.charCodeAt(B);return F}(A.slice(N.length))}Object.assign(B,U),U=null,B.arguments&&B.arguments,B.thisProgram&&B.thisProgram,B.quit&&B.quit,B.wasmBinary&&(t=B.wasmBinary),"object"!=typeof WebAssembly&&r("no native wasm support detected");var Z,e,I,R,a,g,i,c,W=!1;function C(){var A=d.buffer;B.HEAP8=Z=new Int8Array(A),B.HEAP16=I=new Int16Array(A),B.HEAPU8=e=new Uint8Array(A),B.HEAPU16=R=new Uint16Array(A),B.HEAP32=a=new Int32Array(A),B.HEAPU32=g=new Uint32Array(A),B.HEAPF32=i=new Float32Array(A),B.HEAPF64=c=new Float64Array(A)}var h=[],s=[],o=[],J=0,b=null;function r(A){B.onAbort?.(A),n(A="Aborted("+A+")"),W=!0,A+=". Build with -sASSERTIONS for more info.";var Q=new WebAssembly.RuntimeError(A);throw F(Q),Q}var E,m,N="data:application/octet-stream;base64,",G=A=>A.startsWith(N);function X(A){return Promise.resolve().then((()=>function(A){if(A==E&&t)return new Uint8Array(t);var Q=V(A);if(Q)return Q;throw"both async and sync fetching of the wasm failed"}(A)))}function Y(A,Q,F,B){return function(A,Q,F){return X(A).then((A=>WebAssembly.instantiate(A,Q))).then((A=>A)).then(F,(A=>{n(`failed to asynchronously prepare wasm: ${A}`),r(A)}))}(Q,F,B)}G(E="data:application/octet-stream;base64,")||(m=E,E=B.locateFile?B.locateFile(m,l):l+m);var y=A=>{for(;A.length>0;)A.shift()(B)};B.noExitRuntime;var p,S,k=A=>{for(var Q="",F=A;e[F];)Q+=p[e[F++]];return Q},u={},T={},D=A=>{throw new S(A)};function H(A,Q,F={}){if(!("argPackAdvance"in Q))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(A,Q,F={}){var B=Q.name;if(A||D(`type "${B}" must have a positive integer typeid pointer`),T.hasOwnProperty(A)){if(F.ignoreDuplicateRegistrations)return;D(`Cannot register type '${B}' twice`)}if(T[A]=Q,u.hasOwnProperty(A)){var U=u[A];delete u[A],U.forEach((A=>A()))}}(A,Q,F)}function w(){this.allocated=[void 0],this.freelist=[]}var x=new w,f=()=>{for(var A=0,Q=x.reserved;Q<x.allocated.length;++Q)void 0!==x.allocated[Q]&&++A;return A},M=A=>(A||D("Cannot use deleted val. handle = "+A),x.get(A).value),z=A=>{switch(A){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return x.allocate({refcount:1,value:A})}};function v(A){return this.fromWireType(a[A>>2])}var K=(A,Q)=>{switch(Q){case 4:return function(A){return this.fromWireType(i[A>>2])};case 8:return function(A){return this.fromWireType(c[A>>3])};default:throw new TypeError(`invalid float width (${Q}): ${A}`)}},j=(A,Q,F)=>{switch(Q){case 1:return F?A=>Z[A>>0]:A=>e[A>>0];case 2:return F?A=>I[A>>1]:A=>R[A>>1];case 4:return F?A=>a[A>>2]:A=>g[A>>2];default:throw new TypeError(`invalid integer width (${Q}): ${A}`)}};function O(A){return this.fromWireType(g[A>>2])}var L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,P=(A,Q)=>A?((A,Q,F)=>{for(var B=Q+F,U=Q;A[U]&&!(U>=B);)++U;if(U-Q>16&&A.buffer&&L)return L.decode(A.subarray(Q,U));for(var l="";Q<U;){var t=A[Q++];if(128&t){var d=63&A[Q++];if(192!=(224&t)){var n=63&A[Q++];if((t=224==(240&t)?(15&t)<<12|d<<6|n:(7&t)<<18|d<<12|n<<6|63&A[Q++])<65536)l+=String.fromCharCode(t);else{var V=t-65536;l+=String.fromCharCode(55296|V>>10,56320|1023&V)}}else l+=String.fromCharCode((31&t)<<6|d)}else l+=String.fromCharCode(t)}return l})(e,A,Q):"",_="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,q=(A,Q)=>{for(var F=A,B=F>>1,U=B+Q/2;!(B>=U)&&R[B];)++B;if((F=B<<1)-A>32&&_)return _.decode(e.subarray(A,F));for(var l="",t=0;!(t>=Q/2);++t){var d=I[A+2*t>>1];if(0==d)break;l+=String.fromCharCode(d)}return l},$=(A,Q,F)=>{if(F??=2147483647,F<2)return 0;for(var B=Q,U=(F-=2)<2*A.length?F/2:A.length,l=0;l<U;++l){var t=A.charCodeAt(l);I[Q>>1]=t,Q+=2}return I[Q>>1]=0,Q-B},AA=A=>2*A.length,QA=(A,Q)=>{for(var F=0,B="";!(F>=Q/4);){var U=a[A+4*F>>2];if(0==U)break;if(++F,U>=65536){var l=U-65536;B+=String.fromCharCode(55296|l>>10,56320|1023&l)}else B+=String.fromCharCode(U)}return B},FA=(A,Q,F)=>{if(F??=2147483647,F<4)return 0;for(var B=Q,U=B+F-4,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),a[Q>>2]=t,(Q+=4)+4>U)break}return a[Q>>2]=0,Q-B},BA=A=>{for(var Q=0,F=0;F<A.length;++F){var B=A.charCodeAt(F);B>=55296&&B<=57343&&++F,Q+=4}return Q},UA=A=>{var Q=(A-d.buffer.byteLength+65535)/65536;try{return d.grow(Q),C(),1}catch(A){}};(()=>{for(var A=new Array(256),Q=0;Q<256;++Q)A[Q]=String.fromCharCode(Q);p=A})(),S=B.BindingError=class extends Error{constructor(A){super(A),this.name="BindingError"}},B.InternalError=class extends Error{constructor(A){super(A),this.name="InternalError"}},Object.assign(w.prototype,{get(A){return this.allocated[A]},has(A){return void 0!==this.allocated[A]},allocate(A){var Q=this.freelist.pop()||this.allocated.length;return this.allocated[Q]=A,Q},free(A){this.allocated[A]=void 0,this.freelist.push(A)}}),x.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),x.reserved=x.allocated.length,B.count_emval_handles=f;var lA={f:(A,Q,F,B,U)=>{},i:(A,Q,F,B)=>{H(A,{name:Q=k(Q),fromWireType:function(A){return!!A},toWireType:function(A,Q){return Q?F:B},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(e[A])},destructorFunction:null})},h:(A,Q)=>{H(A,{name:Q=k(Q),fromWireType:A=>{var Q=M(A);return(A=>{A>=x.reserved&&0==--x.get(A).refcount&&x.free(A)})(A),Q},toWireType:(A,Q)=>z(Q),argPackAdvance:8,readValueFromPointer:v,destructorFunction:null})},e:(A,Q,F)=>{H(A,{name:Q=k(Q),fromWireType:A=>A,toWireType:(A,Q)=>Q,argPackAdvance:8,readValueFromPointer:K(Q,F),destructorFunction:null})},b:(A,Q,F,B,U)=>{Q=k(Q);var l=A=>A;if(0===B){var t=32-8*F;l=A=>A<<t>>>t}var d=Q.includes("unsigned");H(A,{name:Q,fromWireType:l,toWireType:d?function(A,Q){return this.name,Q>>>0}:function(A,Q){return this.name,Q},argPackAdvance:8,readValueFromPointer:j(Q,F,0!==B),destructorFunction:null})},a:(A,Q,F)=>{var B=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][Q];function U(A){var Q=g[A>>2],F=g[A+4>>2];return new B(Z.buffer,F,Q)}H(A,{name:F=k(F),fromWireType:U,argPackAdvance:8,readValueFromPointer:U},{ignoreDuplicateRegistrations:!0})},d:(A,Q)=>{var F="std::string"===(Q=k(Q));H(A,{name:Q,fromWireType(A){var Q,B=g[A>>2],U=A+4;if(F)for(var l=U,t=0;t<=B;++t){var d=U+t;if(t==B||0==e[d]){var n=P(l,d-l);void 0===Q?Q=n:(Q+=String.fromCharCode(0),Q+=n),l=d+1}}else{var V=new Array(B);for(t=0;t<B;++t)V[t]=String.fromCharCode(e[U+t]);Q=V.join("")}return VA(A),Q},toWireType(A,Q){var B;Q instanceof ArrayBuffer&&(Q=new Uint8Array(Q));var U="string"==typeof Q;U||Q instanceof Uint8Array||Q instanceof Uint8ClampedArray||Q instanceof Int8Array||D("Cannot pass non-string to std::string"),B=F&&U?(A=>{for(var Q=0,F=0;F<A.length;++F){var B=A.charCodeAt(F);B<=127?Q++:B<=2047?Q+=2:B>=55296&&B<=57343?(Q+=4,++F):Q+=3}return Q})(Q):Q.length;var l=nA(4+B+1),t=l+4;if(g[l>>2]=B,F&&U)((A,Q,F,B)=>{if(!(B>0))return 0;for(var U=F+B-1,l=0;l<A.length;++l){var t=A.charCodeAt(l);if(t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&A.charCodeAt(++l)),t<=127){if(F>=U)break;Q[F++]=t}else if(t<=2047){if(F+1>=U)break;Q[F++]=192|t>>6,Q[F++]=128|63&t}else if(t<=65535){if(F+2>=U)break;Q[F++]=224|t>>12,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}else{if(F+3>=U)break;Q[F++]=240|t>>18,Q[F++]=128|t>>12&63,Q[F++]=128|t>>6&63,Q[F++]=128|63&t}}Q[F]=0})(Q,e,t,B+1);else if(U)for(var d=0;d<B;++d){var n=Q.charCodeAt(d);n>255&&(VA(t),D("String has UTF-16 code units that do not fit in 8 bits")),e[t+d]=n}else for(d=0;d<B;++d)e[t+d]=Q[d];return null!==A&&A.push(VA,l),l},argPackAdvance:8,readValueFromPointer:O,destructorFunction(A){VA(A)}})},c:(A,Q,F)=>{var B,U,l,t,d;F=k(F),2===Q?(B=q,U=$,t=AA,l=()=>R,d=1):4===Q&&(B=QA,U=FA,t=BA,l=()=>g,d=2),H(A,{name:F,fromWireType:A=>{for(var F,U=g[A>>2],t=l(),n=A+4,V=0;V<=U;++V){var Z=A+4+V*Q;if(V==U||0==t[Z>>d]){var e=B(n,Z-n);void 0===F?F=e:(F+=String.fromCharCode(0),F+=e),n=Z+Q}}return VA(A),F},toWireType:(A,B)=>{"string"!=typeof B&&D(`Cannot pass non-string to C++ string type ${F}`);var l=t(B),n=nA(4+l+Q);return g[n>>2]=l>>d,U(B,n+4,l+Q),null!==A&&A.push(VA,n),n},argPackAdvance:8,readValueFromPointer:v,destructorFunction(A){VA(A)}})},j:(A,Q)=>{H(A,{isVoid:!0,name:Q=k(Q),argPackAdvance:0,fromWireType:()=>{},toWireType:(A,Q)=>{}})},g:A=>{var Q=e.length,F=2147483648;if((A>>>=0)>F)return!1;for(var B,U,l=1;l<=4;l*=2){var t=Q*(1+.2/l);t=Math.min(t,A+100663296);var d=Math.min(F,(B=Math.max(A,t))+((U=65536)-B%U)%U);if(UA(d))return!0}return!1}},tA=function(){var A={a:lA};function Q(A,Q){var F;return tA=A.exports,d=tA.k,C(),F=tA.l,s.unshift(F),function(A){if(J--,B.monitorRunDependencies?.(J),0==J&&b){var Q=b;b=null,Q()}}(),tA}if(J++,B.monitorRunDependencies?.(J),B.instantiateWasm)try{return B.instantiateWasm(A,Q)}catch(A){n(`Module.instantiateWasm callback failed with error: ${A}`),F(A)}return Y(0,E,A,(function(A){Q(A.instance)})).catch(F),{}}();B._evaluate=(A,Q,F,U,l,t,d,n,V,Z,e,I,R)=>(B._evaluate=tA.m)(A,Q,F,U,l,t,d,n,V,Z,e,I,R);var dA,nA=B._malloc=A=>(nA=B._malloc=tA.o)(A),VA=B._free=A=>(VA=B._free=tA.p)(A);function ZA(){function A(){dA||(dA=!0,B.calledRun=!0,W||(y(s),Q(B),B.onRuntimeInitialized&&B.onRuntimeInitialized(),function(){if(B.postRun)for("function"==typeof B.postRun&&(B.postRun=[B.postRun]);B.postRun.length;)A=B.postRun.shift(),o.unshift(A);var A;y(o)}()))}J>0||(function(){if(B.preRun)for("function"==typeof B.preRun&&(B.preRun=[B.preRun]);B.preRun.length;)A=B.preRun.shift(),h.unshift(A);var A;y(h)}(),J>0||(B.setStatus?(B.setStatus("Running..."),setTimeout((function(){setTimeout((function(){B.setStatus("")}),1),A()}),1)):A()))}if(b=function A(){dA||ZA(),dA||(b=A)},B.preInit)for("function"==typeof B.preInit&&(B.preInit=[B.preInit]);B.preInit.length>0;)B.preInit.pop()();return ZA(),A.ready};class y{constructor(A){let Q;(async()=>{Q=await Y()})();let F,B,U,l,t,d,n,V,Z,e,I,R=0,a=0;this.testPoint=(g,i)=>{if(!Q)throw new Error("Wasm module not loaded");if(!A.camera)throw new Error("Camera not set");if(!A.renderData||!A.depthIndex||!A.chunks)return null;const c=A.renderData,W=A.depthIndex,C=A.chunks,h=Math.pow(2,Math.ceil(Math.log2(c.vertexCount)));var s;(s=h)>R&&(R>0&&(Q._free(F),Q._free(U),Q._free(l),Q._free(t),Q._free(d),Q._free(n),Q._free(V),Q._free(Z),Q._free(e),Q._free(I)),R=s,F=Q._malloc(64),U=Q._malloc(4*R),l=Q._malloc(3*R*4),t=Q._malloc(4*R*4),d=Q._malloc(3*R*4),n=Q._malloc(4*R),V=Q._malloc(R),Z=Q._malloc(12),e=Q._malloc(12),I=Q._malloc(4));const o=Math.pow(2,Math.ceil(Math.log2(c.transforms.length/20)));var J;(J=o)>a&&(a>0&&Q._free(B),a=J,B=Q._malloc(20*a*4));const b=(g+1)/2,r=(i+1)/2,E=Math.floor(15*b)+15*Math.floor(15*r),m=A.camera,N=m.screenPointToRay(g,i);Q.HEAPF32.set(m.data.viewMatrix.buffer,F/4),Q.HEAPU32.set(c.transformIndices,U/4),Q.HEAPF32.set(c.positions,l/4),Q.HEAPF32.set(c.rotations,t/4),Q.HEAPF32.set(c.scales,d/4),Q.HEAPU32.set(W,n/4),Q.HEAPU8.set(C,V),Q.HEAPF32.set(m.position.flat(),Z/4),Q.HEAPF32.set(N.flat(),e/4),Q.HEAPF32.set(c.transforms,B/4),Q._evaluate(F,B,U,l,t,d,n,V,c.vertexCount,E,Z,e,I);const G=Q.HEAPU32[I/4];if(4294967295!==G){return c.getSplat(G)}return null}}}export{R as Camera,e as CameraData,b as Color32,E as FadeInPass,y as IntersectionTester,g as Loader,n as Matrix3,B as Matrix4,d as Object3D,N as OrbitControls,i as PLYLoader,G as Plane,Q as Quaternion,J as RenderData,r as RenderProgram,a as Scene,X as ShaderPass,h as ShaderProgram,Z as Splat,V as SplatData,A as Vector3,I as Vector4,m as WebGLRenderer};
//# sourceMappingURL=index.js.map
