class U{constructor(U=0,F=0,l=0){this.x=U,this.y=F,this.z=l}set(U,F,l){return this.x=U,this.y=F,this.z=l,this}add(F){return"number"==typeof F?new U(this.x+F,this.y+F,this.z+F):new U(this.x+F.x,this.y+F.y,this.z+F.z)}subtract(F){return"number"==typeof F?new U(this.x-F,this.y-F,this.z-F):new U(this.x-F.x,this.y-F.y,this.z-F.z)}multiply(F){return"number"==typeof F?new U(this.x*F,this.y*F,this.z*F):new U(this.x*F.x,this.y*F.y,this.z*F.z)}lerp(F,l){return new U(this.x+(F.x-this.x)*l,this.y+(F.y-this.y)*l,this.z+(F.z-this.z)*l)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}normalize(){const U=this.length();return this.x/=U,this.y/=U,this.z/=U,this}flat(){return[this.x,this.y,this.z]}clone(){return new U(this.x,this.y,this.z)}}class F{constructor(U=0,F=0,l=0,V=1){this.x=U,this.y=F,this.z=l,this.w=V,this.normalize()}set(U,F,l,V){return this.x=U,this.y=F,this.z=l,this.w=V,this.normalize(),this}normalize(){const U=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return this.x/=U,this.y/=U,this.z/=U,this.w/=U,this}multiply(U){const l=this.w,V=this.x,Z=this.y,d=this.z,Q=U.w,R=U.x,t=U.y,W=U.z;return new F(l*R+V*Q+Z*W-d*t,l*t-V*W+Z*Q+d*R,l*W+V*t-Z*R+d*Q,l*Q-V*R-Z*t-d*W)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new F(this.x,this.y,this.z,this.w)}static FromEuler(U){const l=U.x/2,V=U.y/2,Z=U.z/2,d=Math.cos(V),Q=Math.sin(V),R=Math.cos(l),t=Math.sin(l),W=Math.cos(Z),B=Math.sin(Z);return new F(d*t*W+Q*R*B,Q*R*W-d*t*B,d*R*B-Q*t*W,d*R*W+Q*t*B)}toEuler(){const F=new U,l=2*(this.w*this.x+this.y*this.z),V=1-2*(this.x*this.x+this.y*this.y);F.x=Math.atan2(l,V);const Z=2*(this.w*this.y-this.z*this.x);Math.abs(Z)>=1?F.y=Math.sign(Z)*Math.PI/2:F.y=Math.asin(Z);const d=2*(this.w*this.z+this.x*this.y),Q=1-2*(this.y*this.y+this.z*this.z);return F.z=Math.atan2(d,Q),F}static FromMatrix3(U){const l=U.buffer,V=new F,Z=l[0]+l[4]+l[8];if(Z>0){const U=.5/Math.sqrt(Z+1);V.w=.25/U,V.x=(l[7]-l[5])*U,V.y=(l[2]-l[6])*U,V.z=(l[3]-l[1])*U}else if(l[0]>l[4]&&l[0]>l[8]){const U=2*Math.sqrt(1+l[0]-l[4]-l[8]);V.w=(l[7]-l[5])/U,V.x=.25*U,V.y=(l[1]+l[3])/U,V.z=(l[2]+l[6])/U}else if(l[4]>l[8]){const U=2*Math.sqrt(1+l[4]-l[0]-l[8]);V.w=(l[2]-l[6])/U,V.x=(l[1]+l[3])/U,V.y=.25*U,V.z=(l[5]+l[7])/U}else{const U=2*Math.sqrt(1+l[8]-l[0]-l[4]);V.w=(l[3]-l[1])/U,V.x=(l[2]+l[6])/U,V.y=(l[5]+l[7])/U,V.z=.25*U}return V}}class l{constructor(){this.position=new U,this.rotation=new F}}class V{constructor(U=1,F=0,l=0,V=0,Z=1,d=0,Q=0,R=0,t=1){this.buffer=new Array(9),this.set(U,F,l,V,Z,d,Q,R,t)}set(U,F,l,V,Z,d,Q,R,t){const W=this.buffer;return W[0]=U,W[1]=F,W[2]=l,W[3]=V,W[4]=Z,W[5]=d,W[6]=Q,W[7]=R,W[8]=t,this}multiply(U){const F=this.buffer,l=U.buffer;return new V(l[0]*F[0]+l[3]*F[1]+l[6]*F[2],l[1]*F[0]+l[4]*F[1]+l[7]*F[2],l[2]*F[0]+l[5]*F[1]+l[8]*F[2],l[0]*F[3]+l[3]*F[4]+l[6]*F[5],l[1]*F[3]+l[4]*F[4]+l[7]*F[5],l[2]*F[3]+l[5]*F[4]+l[8]*F[5],l[0]*F[6]+l[3]*F[7]+l[6]*F[8],l[1]*F[6]+l[4]*F[7]+l[7]*F[8],l[2]*F[6]+l[5]*F[7]+l[8]*F[8])}clone(){const U=this.buffer;return new V(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8])}static RotationFromQuaternion(U){return new V(1-2*U.y*U.y-2*U.z*U.z,2*U.x*U.y-2*U.z*U.w,2*U.x*U.z+2*U.y*U.w,2*U.x*U.y+2*U.z*U.w,1-2*U.x*U.x-2*U.z*U.z,2*U.y*U.z-2*U.x*U.w,2*U.x*U.z-2*U.y*U.w,2*U.y*U.z+2*U.x*U.w,1-2*U.x*U.x-2*U.y*U.y)}static RotationFromEuler(U){const F=Math.cos(U.x),l=Math.sin(U.x),Z=Math.cos(U.y),d=Math.sin(U.y),Q=Math.cos(U.z),R=Math.sin(U.z);return new V(...[Z*Q+d*l*R,-Z*R+d*l*Q,d*F,F*R,F*Q,-l,-d*Q+Z*l*R,d*R+Z*l*Q,Z*F])}}class Z{constructor(U=1,F=0,l=0,V=0,Z=0,d=1,Q=0,R=0,t=0,W=0,B=1,n=0,c=0,J=0,e=0,h=1){this.buffer=new Array(16),this.set(U,F,l,V,Z,d,Q,R,t,W,B,n,c,J,e,h)}set(U,F,l,V,Z,d,Q,R,t,W,B,n,c,J,e,h){const m=this.buffer;return m[0]=U,m[1]=F,m[2]=l,m[3]=V,m[4]=Z,m[5]=d,m[6]=Q,m[7]=R,m[8]=t,m[9]=W,m[10]=B,m[11]=n,m[12]=c,m[13]=J,m[14]=e,m[15]=h,this}multiply(U){const F=this.buffer,l=U.buffer;return new Z(l[0]*F[0]+l[1]*F[4]+l[2]*F[8]+l[3]*F[12],l[0]*F[1]+l[1]*F[5]+l[2]*F[9]+l[3]*F[13],l[0]*F[2]+l[1]*F[6]+l[2]*F[10]+l[3]*F[14],l[0]*F[3]+l[1]*F[7]+l[2]*F[11]+l[3]*F[15],l[4]*F[0]+l[5]*F[4]+l[6]*F[8]+l[7]*F[12],l[4]*F[1]+l[5]*F[5]+l[6]*F[9]+l[7]*F[13],l[4]*F[2]+l[5]*F[6]+l[6]*F[10]+l[7]*F[14],l[4]*F[3]+l[5]*F[7]+l[6]*F[11]+l[7]*F[15],l[8]*F[0]+l[9]*F[4]+l[10]*F[8]+l[11]*F[12],l[8]*F[1]+l[9]*F[5]+l[10]*F[9]+l[11]*F[13],l[8]*F[2]+l[9]*F[6]+l[10]*F[10]+l[11]*F[14],l[8]*F[3]+l[9]*F[7]+l[10]*F[11]+l[11]*F[15],l[12]*F[0]+l[13]*F[4]+l[14]*F[8]+l[15]*F[12],l[12]*F[1]+l[13]*F[5]+l[14]*F[9]+l[15]*F[13],l[12]*F[2]+l[13]*F[6]+l[14]*F[10]+l[15]*F[14],l[12]*F[3]+l[13]*F[7]+l[14]*F[11]+l[15]*F[15])}clone(){const U=this.buffer;return new Z(U[0],U[1],U[2],U[3],U[4],U[5],U[6],U[7],U[8],U[9],U[10],U[11],U[12],U[13],U[14],U[15])}}class d extends l{constructor(l=new U(0,0,-5),d=new F,Q=1132,R=1132,t=.1,W=100){super();const B=()=>{const U=V.RotationFromQuaternion(this.rotation).buffer,F=this.position.flat(),l=[[U[0],U[1],U[2],0],[U[3],U[4],U[5],0],[U[6],U[7],U[8],0],[-F[0]*U[0]-F[1]*U[3]-F[2]*U[6],-F[0]*U[1]-F[1]*U[4]-F[2]*U[7],-F[0]*U[2]-F[1]*U[5]-F[2]*U[8],1]].flat();return new Z(...l)};this.position=l,this.rotation=d,this.fx=Q,this.fy=R,this.near=t,this.far=W,this.projectionMatrix=new Z,this.viewMatrix=new Z,this.viewProj=new Z,this.update=(U,F)=>{this.projectionMatrix.set(2*this.fx/U,0,0,0,0,-2*this.fy/F,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=B(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class Q{constructor(U,F,l){this.data=U,this.width=F,this.height=l}static FromScene(U){const F=new Float32Array(1),l=new Int32Array(F.buffer),V=U=>{F[0]=U;const V=l[0],Z=V>>23&255;let d,Q=8388607&V;return 0==Z?d=0:Z<113?(d=0,Q|=8388608,Q>>=113-Z,16777216&Q&&(d=1,Q=0)):Z<142?d=Z-112:(d=31,Q=0),(V>>31&1)<<15|d<<10|Q>>13},Z=(U,F)=>(V(U)|V(F)<<16)>>>0,d=2048,R=Math.ceil(2*U.vertexCount/d),t=new Uint32Array(d*R*4),W=new Uint8Array(t.buffer),B=new Float32Array(t.buffer),n=new Float32Array(U.data.buffer),c=new Uint8Array(U.data.buffer);for(let F=0;F<U.vertexCount;F++){B[8*F+0]=n[8*F+0],B[8*F+1]=n[8*F+1],B[8*F+2]=n[8*F+2],W[4*(8*F+7)+0]=c[32*F+24+0],W[4*(8*F+7)+1]=c[32*F+24+1],W[4*(8*F+7)+2]=c[32*F+24+2],W[4*(8*F+7)+3]=c[32*F+24+3];const U=[n[8*F+3+0],n[8*F+3+1],n[8*F+3+2]],l=[(c[32*F+28+0]-128)/128,(c[32*F+28+1]-128)/128,(c[32*F+28+2]-128)/128,(c[32*F+28+3]-128)/128],V=[1-2*(l[2]*l[2]+l[3]*l[3]),2*(l[1]*l[2]+l[0]*l[3]),2*(l[1]*l[3]-l[0]*l[2]),2*(l[1]*l[2]-l[0]*l[3]),1-2*(l[1]*l[1]+l[3]*l[3]),2*(l[2]*l[3]+l[0]*l[1]),2*(l[1]*l[3]+l[0]*l[2]),2*(l[2]*l[3]-l[0]*l[1]),1-2*(l[1]*l[1]+l[2]*l[2])].map(((F,l)=>F*U[Math.floor(l/3)])),d=[V[0]*V[0]+V[3]*V[3]+V[6]*V[6],V[0]*V[1]+V[3]*V[4]+V[6]*V[7],V[0]*V[2]+V[3]*V[5]+V[6]*V[8],V[1]*V[1]+V[4]*V[4]+V[7]*V[7],V[1]*V[2]+V[4]*V[5]+V[7]*V[8],V[2]*V[2]+V[5]*V[5]+V[8]*V[8]];t[8*F+4]=Z(4*d[0],4*d[1]),t[8*F+5]=Z(4*d[2],4*d[3]),t[8*F+6]=Z(4*d[4],4*d[5])}return new Q(t,d,R)}}class R extends l{constructor(){super(),this.data=new Uint8Array(0),this.vertexCount=0,this.f_buffer=new Float32Array(0),this.u_buffer=new Uint8Array(0),this.tex=new Q(new Uint32Array(0),0,0),this.dirty=!0}updateTex(){this.tex=Q.FromScene(this)}setData(U){this.data=U;this.vertexCount=this.data.length/32,this.f_buffer=new Float32Array(this.data.buffer),this.u_buffer=new Uint8Array(this.data.buffer),this.dirty=!0}translate(U){for(let F=0;F<this.vertexCount;F++){const l=this.f_buffer[8*F+0],V=this.f_buffer[8*F+1],Z=this.f_buffer[8*F+2];this.f_buffer[8*F+0]=l+U.x,this.f_buffer[8*F+1]=V+U.y,this.f_buffer[8*F+2]=Z+U.z}this.dirty=!0}rotate(U){const l=V.RotationFromQuaternion(U).buffer;for(let V=0;V<this.vertexCount;V++){const Z=this.f_buffer[8*V+0],d=this.f_buffer[8*V+1],Q=this.f_buffer[8*V+2];this.f_buffer[8*V+0]=l[0]*Z+l[1]*d+l[2]*Q,this.f_buffer[8*V+1]=l[3]*Z+l[4]*d+l[5]*Q,this.f_buffer[8*V+2]=l[6]*Z+l[7]*d+l[8]*Q;const R=new F((this.u_buffer[32*V+28+1]-128)/128,(this.u_buffer[32*V+28+2]-128)/128,(this.u_buffer[32*V+28+3]-128)/128,(this.u_buffer[32*V+28+0]-128)/128),t=U.multiply(R);this.u_buffer[32*V+28+1]=Math.round((128*t.x+128)%256),this.u_buffer[32*V+28+2]=Math.round((128*t.y+128)%256),this.u_buffer[32*V+28+3]=Math.round((128*t.z+128)%256),this.u_buffer[32*V+28+0]=Math.round((128*t.w+128)%256)}this.dirty=!0}}class t{static async LoadAsync(U,F,l){const V=await fetch(U,{mode:"cors",credentials:"omit"});if(200!=V.status)throw new Error(V.status+" Unable to load "+V.url);const Z=V.body.getReader(),d=parseInt(V.headers.get("content-length")),Q=new Uint8Array(d);let R=0;for(;;){const{done:U,value:F}=await Z.read();if(U)break;Q.set(F,R),R+=F.length,null==l||l(R/d)}F.setData(Q)}static async LoadFromFileAsync(U,F,l){const V=new FileReader;V.onload=U=>{const l=new Uint8Array(U.target.result);F.setData(l)},V.onprogress=U=>{null==l||l(U.loaded/U.total)},V.readAsArrayBuffer(U),await new Promise((U=>{V.onloadend=()=>{U()}}))}}function W(U,F){const l=new Uint8Array(U),V=(new TextDecoder).decode(l.slice(0,10240)),Z="end_header\n",d=V.indexOf(Z);if(d<0)throw new Error("Unable to read .ply file header");const Q=parseInt(/element vertex (\d+)\n/.exec(V)[1]);let R=0;const t={},W={},B={double:"getFloat64",int:"getInt32",uint:"getUint32",float:"getFloat32",short:"getInt16",ushort:"getUint16",uchar:"getUint8"};for(const U of V.slice(0,d).split("\n").filter((U=>U.startsWith("property ")))){const[F,l,V]=U.split(" "),Z=B[l]||"getInt8";W[V]=Z,t[V]=R,R+=parseInt(Z.replace(/[^\d]/g,""))/8}const n=new DataView(U,d+11);let c=0;const J=new Proxy({},{get(U,F){if(!W[F])throw new Error(F+" not found");return n[W[F]](c*R+t[F],!0)}}),e=new ArrayBuffer(32*Q);for(let U=0;U<Q;U++){c=U;const l=new Float32Array(e,32*U,3),V=new Float32Array(e,32*U+12,3),Z=new Uint8ClampedArray(e,32*U+12+12,4),d=new Uint8ClampedArray(e,32*U+12+12+4,4);if(W.scale_0){const U=Math.sqrt(J.rot_0**2+J.rot_1**2+J.rot_2**2+J.rot_3**2);d[0]=J.rot_0/U*128+128,d[1]=J.rot_1/U*128+128,d[2]=J.rot_2/U*128+128,d[3]=J.rot_3/U*128+128,V[0]=Math.exp(J.scale_0),V[1]=Math.exp(J.scale_1),V[2]=Math.exp(J.scale_2)}else V[0]=.01,V[1]=.01,V[2]=.01,d[0]=255,d[1]=0,d[2]=0,d[3]=0;if(l[0]=J.x,l[1]=J.y,l[2]=J.z,W.f_dc_0){const U=.28209479177387814;Z[0]=255*(.5+U*J.f_dc_0),Z[1]=255*(.5+U*J.f_dc_1),Z[2]=255*(.5+U*J.f_dc_2)}else Z[0]=J.red,Z[1]=J.green,Z[2]=J.blue;W.opacity?Z[3]=1/(1+Math.exp(-J.opacity))*255:Z[3]=255,U%1e3==0&&(null==F||F(U/Q))}return e}class B{static async LoadAsync(U,F,l){const V=await fetch(U,{mode:"cors",credentials:"omit"});if(200!=V.status)throw new Error(V.status+" Unable to load "+V.url);const Z=V.body.getReader(),d=parseInt(V.headers.get("content-length")),Q=new Uint8Array(d);let R=0;for(;;){const{done:U,value:F}=await Z.read();if(U)break;Q.set(F,R),R+=F.length,null==l||l(.5*R/d)}if(112!==Q[0]||108!==Q[1]||121!==Q[2]||10!==Q[3])throw new Error("Invalid PLY file");const t=new Uint8Array(W(Q.buffer,(U=>{null==l||l(.5+.5*U)})));F.setData(t)}static async LoadFromFileAsync(U,F,l){const V=new FileReader;V.onload=U=>{const V=new Uint8Array(W(U.target.result,(U=>{null==l||l(.5+.5*U)})));F.setData(V)},V.onprogress=U=>{null==l||l(.5*U.loaded/U.total)},V.readAsArrayBuffer(U),await new Promise((U=>{V.onloadend=()=>{U()}}))}}function n(U,F,l){var V=void 0===F?null:F,Z=function(U,F){var l=atob(U);if(F){for(var V=new Uint8Array(l.length),Z=0,d=l.length;Z<d;++Z)V[Z]=l.charCodeAt(Z);return String.fromCharCode.apply(null,new Uint16Array(V.buffer))}return l}(U,void 0!==l&&l),d=Z.indexOf("\n",10)+1,Q=Z.substring(d)+(V?"//# sourceMappingURL="+V:""),R=new Blob([Q],{type:"application/javascript"});return URL.createObjectURL(R)}var c,J,e,h,m=(c="",J=null,e=!1,function(U){return h=h||n(c,J,e),new Worker(h,U)});class b{constructor(U=1){let F,l,V,Z=0,d=!1;this.init=(U,Q)=>{Z=0,d=!0,F=U,l=U.gl.getUniformLocation(Q,"u_useDepthFade"),F.gl.uniform1i(l,1),V=U.gl.getUniformLocation(Q,"u_depthFade"),F.gl.uniform1f(V,Z)},this.render=()=>{d&&(Z=Math.min(Z+.01*U,1),Z>=1&&(d=!1,F.gl.uniform1i(l,0)),F.gl.uniform1f(V,Z))}}}class a{constructor(U=null,F=null){const l=U||document.createElement("canvas");U||(l.style.display="block",l.style.boxSizing="border-box",l.style.width="100%",l.style.height="100%",l.style.margin="0",l.style.padding="0",document.body.appendChild(l)),l.style.background="#000",this.domElement=l;const V=l.getContext("webgl2",{antialias:!1});this.gl=V;const Z=F||[];let d,Q,R,t,W,B,n,c,J,e,h,a,i,X;F||Z.push(new b);let N=!1;this.resize=()=>{const U=l.clientWidth,F=l.clientHeight;l.width===U&&l.height===F||this.setSize(U,F)},this.setSize=(U,F)=>{l.width=U,l.height=F,Q&&(V.viewport(0,0,l.width,l.height),Q.update(l.width,l.height),n=V.getUniformLocation(B,"projection"),V.uniformMatrix4fv(n,!1,Q.projectionMatrix.buffer),c=V.getUniformLocation(B,"viewport"),V.uniform2fv(c,new Float32Array([l.width,l.height])))};const G=()=>{R=new m,R.postMessage({scene:d}),V.viewport(0,0,l.width,l.height),t=V.createShader(V.VERTEX_SHADER),V.shaderSource(t,"#version 300 es\nprecision highp float;\nprecision highp int;\n\nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\nuniform bool u_useDepthFade;\nuniform float u_depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n\n    float scalingFactor = 1.0;\n\n    if(u_useDepthFade) {\n        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n        float near = 0.1; float far = 100.0;\n        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n        float start = max(normalizedDepth - 0.1, 0.0);\n        float end = min(normalizedDepth + 0.1, 1.0);\n        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);\n    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport \n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n\n}\n"),V.compileShader(t),V.getShaderParameter(t,V.COMPILE_STATUS)||console.error(V.getShaderInfoLog(t)),W=V.createShader(V.FRAGMENT_SHADER),V.shaderSource(W,"#version 300 es\nprecision highp float;\n\nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"),V.compileShader(W),V.getShaderParameter(W,V.COMPILE_STATUS)||console.error(V.getShaderInfoLog(W)),B=V.createProgram(),V.attachShader(B,t),V.attachShader(B,W),V.linkProgram(B),V.useProgram(B),V.getProgramParameter(B,V.LINK_STATUS)||console.error(V.getProgramInfoLog(B)),V.disable(V.DEPTH_TEST),V.enable(V.BLEND),V.blendFuncSeparate(V.ONE_MINUS_DST_ALPHA,V.ONE,V.ONE_MINUS_DST_ALPHA,V.ONE),V.blendEquationSeparate(V.FUNC_ADD,V.FUNC_ADD),Q.update(l.width,l.height),n=V.getUniformLocation(B,"projection"),V.uniformMatrix4fv(n,!1,Q.projectionMatrix.buffer),c=V.getUniformLocation(B,"viewport"),V.uniform2fv(c,new Float32Array([l.width,l.height])),J=V.getUniformLocation(B,"focal"),V.uniform2fv(J,new Float32Array([Q.fx,Q.fy])),e=V.getUniformLocation(B,"view"),V.uniformMatrix4fv(e,!1,Q.viewMatrix.buffer);const U=new Float32Array([-2,-2,2,-2,2,2,-2,2]);X=V.createBuffer(),V.bindBuffer(V.ARRAY_BUFFER,X),V.bufferData(V.ARRAY_BUFFER,U,V.STATIC_DRAW),a=V.getAttribLocation(B,"position"),V.enableVertexAttribArray(a),V.vertexAttribPointer(a,2,V.FLOAT,!1,0,0);const F=V.createTexture();V.bindTexture(V.TEXTURE_2D,F),h=V.getUniformLocation(B,"u_texture"),V.uniform1i(h,0);const b=V.createBuffer();i=V.getAttribLocation(B,"index"),V.enableVertexAttribArray(i),V.bindBuffer(V.ARRAY_BUFFER,b),V.vertexAttribIPointer(i,1,V.INT,0,0),V.vertexAttribDivisor(i,1),V.bindTexture(V.TEXTURE_2D,F),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_WRAP_S,V.CLAMP_TO_EDGE),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_WRAP_T,V.CLAMP_TO_EDGE),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_MIN_FILTER,V.NEAREST),V.texParameteri(V.TEXTURE_2D,V.TEXTURE_MAG_FILTER,V.NEAREST),V.texImage2D(V.TEXTURE_2D,0,V.RGBA32UI,d.tex.width,d.tex.height,0,V.RGBA_INTEGER,V.UNSIGNED_INT,d.tex.data),V.activeTexture(V.TEXTURE0),V.bindTexture(V.TEXTURE_2D,F);for(const U of Z)U.init(this,B);R.onmessage=U=>{if(U.data.depthIndex){const{depthIndex:F}=U.data;V.bindBuffer(V.ARRAY_BUFFER,b),V.bufferData(V.ARRAY_BUFFER,F,V.STATIC_DRAW)}},N=!0};this.render=(U,F)=>{if((U.dirty||U!==d||F!==Q)&&(N&&this.dispose(),d=U,Q=F,U.updateTex(),G(),U.dirty=!1),Q.update(l.width,l.height),R.postMessage({viewProj:Q.viewProj}),d.vertexCount>0){for(const U of Z)U.render();V.uniformMatrix4fv(e,!1,Q.viewMatrix.buffer),V.clear(V.COLOR_BUFFER_BIT),V.drawArraysInstanced(V.TRIANGLE_FAN,0,4,d.vertexCount)}else V.clear(V.COLOR_BUFFER_BIT)},this.dispose=()=>{R.terminate(),V.deleteShader(t),V.deleteShader(W),V.deleteProgram(B),V.deleteBuffer(X),V.deleteBuffer(undefined),V.deleteBuffer(undefined),V.deleteBuffer(undefined),V.deleteBuffer(undefined),N=!1},this.resize()}}class i{constructor(l,Z,d=.5,Q=.5,R=5,t=!0){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12;let W=new U,B=W.clone(),n=d,c=Q,J=R,e=!1,h=!1,m=0,b=0,a=0;const i={},X=()=>.1+.9*(J-this.minZoom)/(this.maxZoom-this.minZoom),N=U=>{i[U.code]=!0,"ArrowUp"===U.code&&(i.KeyW=!0),"ArrowDown"===U.code&&(i.KeyS=!0),"ArrowLeft"===U.code&&(i.KeyA=!0),"ArrowRight"===U.code&&(i.KeyD=!0)},G=U=>{i[U.code]=!1,"ArrowUp"===U.code&&(i.KeyW=!1),"ArrowDown"===U.code&&(i.KeyS=!1),"ArrowLeft"===U.code&&(i.KeyA=!1),"ArrowRight"===U.code&&(i.KeyD=!1)},o=U=>{I(U),e=!0,h=2===U.button,b=U.clientX,a=U.clientY,window.addEventListener("mouseup",s)},s=U=>{I(U),e=!1,h=!1,window.removeEventListener("mouseup",s)},S=F=>{if(I(F),!e)return;const Z=F.clientX-b,d=F.clientY-a;if(h){const F=X(),Q=-Z*this.panSpeed*.01*F,R=-d*this.panSpeed*.01*F,t=V.RotationFromQuaternion(l.rotation).buffer,W=new U(t[0],t[3],t[6]),n=new U(t[1],t[4],t[7]);B=B.add(W.multiply(Q)),B=B.add(n.multiply(R))}else n-=Z*this.orbitSpeed*.003,c+=d*this.orbitSpeed*.003,c=Math.min(Math.max(c,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);b=F.clientX,a=F.clientY},p=U=>{I(U);const F=X();J+=U.deltaY*this.zoomSpeed*.025*F,J=Math.min(Math.max(J,this.minZoom),this.maxZoom)},k=U=>{if(I(U),1===U.touches.length)e=!0,h=!1,b=U.touches[0].clientX,a=U.touches[0].clientY,m=0;else if(2===U.touches.length){e=!0,h=!0,b=(U.touches[0].clientX+U.touches[1].clientX)/2,a=(U.touches[0].clientY+U.touches[1].clientY)/2;const F=U.touches[0].clientX-U.touches[1].clientX,l=U.touches[0].clientY-U.touches[1].clientY;m=Math.sqrt(F*F+l*l)}},Y=U=>{I(U),e=!1,h=!1},y=F=>{if(I(F),e)if(h){const Z=X(),d=F.touches[0].clientX-F.touches[1].clientX,Q=F.touches[0].clientY-F.touches[1].clientY,R=Math.sqrt(d*d+Q*Q);J+=(m-R)*this.zoomSpeed*.1*Z,J=Math.min(Math.max(J,this.minZoom),this.maxZoom),m=R;const t=(F.touches[0].clientX+F.touches[1].clientX)/2,W=(F.touches[0].clientY+F.touches[1].clientY)/2,n=t-b,c=W-a,e=V.RotationFromQuaternion(l.rotation).buffer,h=new U(e[0],e[3],e[6]),i=new U(e[1],e[4],e[7]);B=B.add(h.multiply(-n*this.panSpeed*.025*Z)),B=B.add(i.multiply(-c*this.panSpeed*.025*Z)),b=t,a=W}else{const U=F.touches[0].clientX-b,l=F.touches[0].clientY-a;n-=U*this.orbitSpeed*.003,c+=l*this.orbitSpeed*.003,c=Math.min(Math.max(c,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),b=F.touches[0].clientX,a=F.touches[0].clientY}},r=(U,F,l)=>(1-l)*U+l*F;this.update=()=>{d=r(d,n,this.dampening),Q=r(Q,c,this.dampening),R=r(R,J,this.dampening),W=W.lerp(B,this.dampening);const Z=W.x+R*Math.sin(d)*Math.cos(Q),t=W.y-R*Math.sin(Q),e=W.z-R*Math.cos(d)*Math.cos(Q);l.position.set(Z,t,e);const h=W.subtract(l.position).normalize(),m=Math.asin(-h.y),b=Math.atan2(h.x,h.z);l.rotation=F.FromEuler(new U(m,b,0));const a=.025,X=.01,N=V.RotationFromQuaternion(l.rotation).buffer,G=new U(-N[2],-N[5],-N[8]),o=new U(N[0],N[3],N[6]);i.KeyS&&(B=B.add(G.multiply(a))),i.KeyW&&(B=B.subtract(G.multiply(a))),i.KeyA&&(B=B.subtract(o.multiply(a))),i.KeyD&&(B=B.add(o.multiply(a))),i.KeyE&&(n+=X),i.KeyQ&&(n-=X),i.KeyR&&(c+=X),i.KeyF&&(c-=X)};const I=U=>{U.preventDefault(),U.stopPropagation()};this.dispose=()=>{Z.removeEventListener("dragenter",I),Z.removeEventListener("dragover",I),Z.removeEventListener("dragleave",I),Z.removeEventListener("contextmenu",I),Z.removeEventListener("mousedown",o),Z.removeEventListener("mousemove",S),Z.removeEventListener("wheel",p),Z.removeEventListener("touchstart",k),Z.removeEventListener("touchend",Y),Z.removeEventListener("touchmove",y),t&&(window.removeEventListener("keydown",N),window.removeEventListener("keyup",G))},t&&(window.addEventListener("keydown",N),window.addEventListener("keyup",G)),Z.addEventListener("dragenter",I),Z.addEventListener("dragover",I),Z.addEventListener("dragleave",I),Z.addEventListener("contextmenu",I),Z.addEventListener("mousedown",o),Z.addEventListener("mousemove",S),Z.addEventListener("wheel",p),Z.addEventListener("touchstart",k),Z.addEventListener("touchend",Y),Z.addEventListener("touchmove",y),this.update()}}class X{init(U,F){}render(){}}export{d as Camera,b as FadeInPass,t as Loader,V as Matrix3,Z as Matrix4,i as OrbitControls,B as PLYLoader,F as Quaternion,R as Scene,X as ShaderPass,U as Vector3,a as WebGLRenderer};
//# sourceMappingURL=index.js.map
